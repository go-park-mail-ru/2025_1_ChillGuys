// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD7ffe469DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(in *jlexer.Lexer, out *SurveysListDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "surveys":
			if in.IsNull() {
				in.Skip()
				out.Surveys = nil
			} else {
				in.Delim('[')
				if out.Surveys == nil {
					if !in.IsDelim(']') {
						out.Surveys = make([]BriefSurveyDTO, 0, 2)
					} else {
						out.Surveys = []BriefSurveyDTO{}
					}
				} else {
					out.Surveys = (out.Surveys)[:0]
				}
				for !in.IsDelim(']') {
					var v1 BriefSurveyDTO
					(v1).UnmarshalEasyJSON(in)
					out.Surveys = append(out.Surveys, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD7ffe469EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(out *jwriter.Writer, in SurveysListDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"surveys\":"
		out.RawString(prefix[1:])
		if in.Surveys == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Surveys {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SurveysListDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD7ffe469EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SurveysListDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD7ffe469EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SurveysListDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD7ffe469DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SurveysListDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD7ffe469DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(l, v)
}
func easyjsonD7ffe469DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(in *jlexer.Lexer, out *SurveyWithQuestionsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "surveyId":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "questions":
			if in.IsNull() {
				in.Skip()
				out.Questions = nil
			} else {
				in.Delim('[')
				if out.Questions == nil {
					if !in.IsDelim(']') {
						out.Questions = make([]QuestionResponseDTO, 0, 2)
					} else {
						out.Questions = []QuestionResponseDTO{}
					}
				} else {
					out.Questions = (out.Questions)[:0]
				}
				for !in.IsDelim(']') {
					var v4 QuestionResponseDTO
					(v4).UnmarshalEasyJSON(in)
					out.Questions = append(out.Questions, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD7ffe469EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(out *jwriter.Writer, in SurveyWithQuestionsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"surveyId\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"questions\":"
		out.RawString(prefix)
		if in.Questions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Questions {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SurveyWithQuestionsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD7ffe469EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SurveyWithQuestionsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD7ffe469EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SurveyWithQuestionsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD7ffe469DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SurveyWithQuestionsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD7ffe469DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(l, v)
}
func easyjsonD7ffe469DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(in *jlexer.Lexer, out *SurveyStatisticsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "questions":
			if in.IsNull() {
				in.Skip()
				out.Questions = nil
			} else {
				in.Delim('[')
				if out.Questions == nil {
					if !in.IsDelim(']') {
						out.Questions = make([]QuestionStatisticsDTO, 0, 1)
					} else {
						out.Questions = []QuestionStatisticsDTO{}
					}
				} else {
					out.Questions = (out.Questions)[:0]
				}
				for !in.IsDelim(']') {
					var v7 QuestionStatisticsDTO
					(v7).UnmarshalEasyJSON(in)
					out.Questions = append(out.Questions, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD7ffe469EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(out *jwriter.Writer, in SurveyStatisticsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix[1:])
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"questions\":"
		out.RawString(prefix)
		if in.Questions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Questions {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SurveyStatisticsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD7ffe469EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SurveyStatisticsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD7ffe469EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SurveyStatisticsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD7ffe469DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SurveyStatisticsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD7ffe469DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(l, v)
}
func easyjsonD7ffe469DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto3(in *jlexer.Lexer, out *SubmitAnswersRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "surveyId":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.SurveyID).UnmarshalText(data))
			}
		case "answers":
			if in.IsNull() {
				in.Skip()
				out.Answers = nil
			} else {
				in.Delim('[')
				if out.Answers == nil {
					if !in.IsDelim(']') {
						out.Answers = make([]AnswerRequestDTO, 0, 2)
					} else {
						out.Answers = []AnswerRequestDTO{}
					}
				} else {
					out.Answers = (out.Answers)[:0]
				}
				for !in.IsDelim(']') {
					var v10 AnswerRequestDTO
					(v10).UnmarshalEasyJSON(in)
					out.Answers = append(out.Answers, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD7ffe469EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto3(out *jwriter.Writer, in SubmitAnswersRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"surveyId\":"
		out.RawString(prefix[1:])
		out.RawText((in.SurveyID).MarshalText())
	}
	{
		const prefix string = ",\"answers\":"
		out.RawString(prefix)
		if in.Answers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Answers {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubmitAnswersRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD7ffe469EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubmitAnswersRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD7ffe469EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubmitAnswersRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD7ffe469DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubmitAnswersRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD7ffe469DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto3(l, v)
}
func easyjsonD7ffe469DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto4(in *jlexer.Lexer, out *QuestionStatisticsDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "text":
			out.Text = string(in.String())
		case "stats":
			if in.IsNull() {
				in.Skip()
				out.Stats = nil
			} else {
				in.Delim('[')
				if out.Stats == nil {
					if !in.IsDelim(']') {
						out.Stats = make([]uint32, 0, 16)
					} else {
						out.Stats = []uint32{}
					}
				} else {
					out.Stats = (out.Stats)[:0]
				}
				for !in.IsDelim(']') {
					var v13 uint32
					v13 = uint32(in.Uint32())
					out.Stats = append(out.Stats, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD7ffe469EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto4(out *jwriter.Writer, in QuestionStatisticsDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"stats\":"
		out.RawString(prefix)
		if in.Stats == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Stats {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.Uint32(uint32(v15))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuestionStatisticsDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD7ffe469EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuestionStatisticsDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD7ffe469EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuestionStatisticsDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD7ffe469DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuestionStatisticsDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD7ffe469DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto4(l, v)
}
func easyjsonD7ffe469DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto5(in *jlexer.Lexer, out *QuestionResponseDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "questionId":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD7ffe469EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto5(out *jwriter.Writer, in QuestionResponseDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"questionId\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuestionResponseDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD7ffe469EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuestionResponseDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD7ffe469EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuestionResponseDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD7ffe469DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuestionResponseDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD7ffe469DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto5(l, v)
}
func easyjsonD7ffe469DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto6(in *jlexer.Lexer, out *BriefSurveyDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD7ffe469EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto6(out *jwriter.Writer, in BriefSurveyDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BriefSurveyDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD7ffe469EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BriefSurveyDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD7ffe469EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BriefSurveyDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD7ffe469DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BriefSurveyDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD7ffe469DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto6(l, v)
}
func easyjsonD7ffe469DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto7(in *jlexer.Lexer, out *AnswerRequestDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "questionId":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.QuestionID).UnmarshalText(data))
			}
		case "value":
			out.Value = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD7ffe469EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto7(out *jwriter.Writer, in AnswerRequestDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"questionId\":"
		out.RawString(prefix[1:])
		out.RawText((in.QuestionID).MarshalText())
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Uint(uint(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AnswerRequestDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD7ffe469EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AnswerRequestDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD7ffe469EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AnswerRequestDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD7ffe469DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AnswerRequestDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD7ffe469DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto7(l, v)
}
