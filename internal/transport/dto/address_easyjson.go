// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF4fdf71eDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(in *jlexer.Lexer, out *GetPointAddressResDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "AddressString":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AddressString).UnmarshalJSON(data))
			}
		case "coordinate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Coordinate).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF4fdf71eEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(out *jwriter.Writer, in GetPointAddressResDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"AddressString\":"
		out.RawString(prefix)
		out.Raw((in.AddressString).MarshalJSON())
	}
	{
		const prefix string = ",\"coordinate\":"
		out.RawString(prefix)
		out.Raw((in.Coordinate).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetPointAddressResDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF4fdf71eEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetPointAddressResDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF4fdf71eEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetPointAddressResDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF4fdf71eDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetPointAddressResDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF4fdf71eDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(l, v)
}
func easyjsonF4fdf71eDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(in *jlexer.Lexer, out *GetAddressResDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "label":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Label).UnmarshalJSON(data))
			}
		case "AddressString":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AddressString).UnmarshalJSON(data))
			}
		case "coordinate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Coordinate).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF4fdf71eEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(out *jwriter.Writer, in GetAddressResDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"label\":"
		out.RawString(prefix)
		out.Raw((in.Label).MarshalJSON())
	}
	{
		const prefix string = ",\"AddressString\":"
		out.RawString(prefix)
		out.Raw((in.AddressString).MarshalJSON())
	}
	{
		const prefix string = ",\"coordinate\":"
		out.RawString(prefix)
		out.Raw((in.Coordinate).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetAddressResDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF4fdf71eEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetAddressResDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF4fdf71eEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetAddressResDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF4fdf71eDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetAddressResDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF4fdf71eDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(l, v)
}
func easyjsonF4fdf71eDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(in *jlexer.Lexer, out *GeoapifyResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "features":
			if in.IsNull() {
				in.Skip()
				out.Features = nil
			} else {
				in.Delim('[')
				if out.Features == nil {
					if !in.IsDelim(']') {
						out.Features = make([]GeoapifyFeature, 0, 1)
					} else {
						out.Features = []GeoapifyFeature{}
					}
				} else {
					out.Features = (out.Features)[:0]
				}
				for !in.IsDelim(']') {
					var v1 GeoapifyFeature
					(v1).UnmarshalEasyJSON(in)
					out.Features = append(out.Features, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF4fdf71eEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(out *jwriter.Writer, in GeoapifyResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"features\":"
		out.RawString(prefix[1:])
		if in.Features == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Features {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GeoapifyResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF4fdf71eEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GeoapifyResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF4fdf71eEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GeoapifyResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF4fdf71eDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GeoapifyResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF4fdf71eDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(l, v)
}
func easyjsonF4fdf71eDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto3(in *jlexer.Lexer, out *GeoapifyFeature) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "properties":
			easyjsonF4fdf71eDecode(in, &out.Properties)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF4fdf71eEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto3(out *jwriter.Writer, in GeoapifyFeature) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"properties\":"
		out.RawString(prefix[1:])
		easyjsonF4fdf71eEncode(out, in.Properties)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GeoapifyFeature) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF4fdf71eEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GeoapifyFeature) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF4fdf71eEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GeoapifyFeature) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF4fdf71eDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GeoapifyFeature) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF4fdf71eDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto3(l, v)
}
func easyjsonF4fdf71eDecode(in *jlexer.Lexer, out *struct {
	ResultType string  `json:"result_type"`
	Lon        float64 `json:"lon"`
	Lat        float64 `json:"lat"`
	Rank       struct {
		Importance float64 `json:"importance"`
	} `json:"rank"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result_type":
			out.ResultType = string(in.String())
		case "lon":
			out.Lon = float64(in.Float64())
		case "lat":
			out.Lat = float64(in.Float64())
		case "rank":
			easyjsonF4fdf71eDecode1(in, &out.Rank)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF4fdf71eEncode(out *jwriter.Writer, in struct {
	ResultType string  `json:"result_type"`
	Lon        float64 `json:"lon"`
	Lat        float64 `json:"lat"`
	Rank       struct {
		Importance float64 `json:"importance"`
	} `json:"rank"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"result_type\":"
		out.RawString(prefix[1:])
		out.String(string(in.ResultType))
	}
	{
		const prefix string = ",\"lon\":"
		out.RawString(prefix)
		out.Float64(float64(in.Lon))
	}
	{
		const prefix string = ",\"lat\":"
		out.RawString(prefix)
		out.Float64(float64(in.Lat))
	}
	{
		const prefix string = ",\"rank\":"
		out.RawString(prefix)
		easyjsonF4fdf71eEncode1(out, in.Rank)
	}
	out.RawByte('}')
}
func easyjsonF4fdf71eDecode1(in *jlexer.Lexer, out *struct {
	Importance float64 `json:"importance"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "importance":
			out.Importance = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF4fdf71eEncode1(out *jwriter.Writer, in struct {
	Importance float64 `json:"importance"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"importance\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.Importance))
	}
	out.RawByte('}')
}
func easyjsonF4fdf71eDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto4(in *jlexer.Lexer, out *AddressReqDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "label":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Label).UnmarshalJSON(data))
			}
		case "region":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Region).UnmarshalJSON(data))
			}
		case "city":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.City).UnmarshalJSON(data))
			}
		case "AddressString":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AddressString).UnmarshalJSON(data))
			}
		case "coordinate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Coordinate).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF4fdf71eEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto4(out *jwriter.Writer, in AddressReqDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"label\":"
		out.RawString(prefix[1:])
		out.Raw((in.Label).MarshalJSON())
	}
	{
		const prefix string = ",\"region\":"
		out.RawString(prefix)
		out.Raw((in.Region).MarshalJSON())
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.Raw((in.City).MarshalJSON())
	}
	{
		const prefix string = ",\"AddressString\":"
		out.RawString(prefix)
		out.Raw((in.AddressString).MarshalJSON())
	}
	{
		const prefix string = ",\"coordinate\":"
		out.RawString(prefix)
		out.Raw((in.Coordinate).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddressReqDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF4fdf71eEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddressReqDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF4fdf71eEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddressReqDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF4fdf71eDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddressReqDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF4fdf71eDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto4(l, v)
}
func easyjsonF4fdf71eDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto5(in *jlexer.Lexer, out *AddressDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "label":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Label).UnmarshalJSON(data))
			}
		case "region":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Region).UnmarshalJSON(data))
			}
		case "city":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.City).UnmarshalJSON(data))
			}
		case "AddressString":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AddressString).UnmarshalJSON(data))
			}
		case "coordinate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Coordinate).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF4fdf71eEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto5(out *jwriter.Writer, in AddressDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"label\":"
		out.RawString(prefix)
		out.Raw((in.Label).MarshalJSON())
	}
	{
		const prefix string = ",\"region\":"
		out.RawString(prefix)
		out.Raw((in.Region).MarshalJSON())
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.Raw((in.City).MarshalJSON())
	}
	{
		const prefix string = ",\"AddressString\":"
		out.RawString(prefix)
		out.Raw((in.AddressString).MarshalJSON())
	}
	{
		const prefix string = ",\"coordinate\":"
		out.RawString(prefix)
		out.Raw((in.Coordinate).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddressDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF4fdf71eEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddressDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF4fdf71eEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddressDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF4fdf71eDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddressDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF4fdf71eDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto5(l, v)
}
