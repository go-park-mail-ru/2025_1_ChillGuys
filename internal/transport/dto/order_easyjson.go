// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	models "github.com/go-park-mail-ru/2025_1_ChillGuys/internal/models"
	uuid "github.com/google/uuid"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson120d1ca2DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(in *jlexer.Lexer, out *UpdateOrderStatusRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "orderID":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.OrderID).UnmarshalText(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(out *jwriter.Writer, in UpdateOrderStatusRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"orderID\":"
		out.RawString(prefix[1:])
		out.RawText((in.OrderID).MarshalText())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateOrderStatusRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateOrderStatusRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateOrderStatusRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateOrderStatusRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(l, v)
}
func easyjson120d1ca2DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(in *jlexer.Lexer, out *OrderPreviewDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "status":
			out.Status = models.OrderStatus(in.Int())
		case "totalPrice":
			out.TotalPrice = float64(in.Float64())
		case "totalDiscountPrice":
			out.TotalDiscountPrice = float64(in.Float64())
		case "products":
			if in.IsNull() {
				in.Skip()
				out.Products = nil
			} else {
				in.Delim('[')
				if out.Products == nil {
					if !in.IsDelim(']') {
						out.Products = make([]models.OrderPreviewProductDTO, 0, 2)
					} else {
						out.Products = []models.OrderPreviewProductDTO{}
					}
				} else {
					out.Products = (out.Products)[:0]
				}
				for !in.IsDelim(']') {
					var v1 models.OrderPreviewProductDTO
					easyjson120d1ca2DecodeGithubComGoParkMailRu20251ChillGuysInternalModels(in, &v1)
					out.Products = append(out.Products, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "address":
			easyjson120d1ca2DecodeGithubComGoParkMailRu20251ChillGuysInternalModels1(in, &out.Address)
		case "expectedDeliveryAt":
			if in.IsNull() {
				in.Skip()
				out.ExpectedDeliveryAt = nil
			} else {
				if out.ExpectedDeliveryAt == nil {
					out.ExpectedDeliveryAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ExpectedDeliveryAt).UnmarshalJSON(data))
				}
			}
		case "actualDeliveryAt":
			if in.IsNull() {
				in.Skip()
				out.ActualDeliveryAt = nil
			} else {
				if out.ActualDeliveryAt == nil {
					out.ActualDeliveryAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ActualDeliveryAt).UnmarshalJSON(data))
				}
			}
		case "createdAt":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(out *jwriter.Writer, in OrderPreviewDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Raw((in.Status).MarshalJSON())
	}
	{
		const prefix string = ",\"totalPrice\":"
		out.RawString(prefix)
		out.Float64(float64(in.TotalPrice))
	}
	{
		const prefix string = ",\"totalDiscountPrice\":"
		out.RawString(prefix)
		out.Float64(float64(in.TotalDiscountPrice))
	}
	{
		const prefix string = ",\"products\":"
		out.RawString(prefix)
		if in.Products == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Products {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjson120d1ca2EncodeGithubComGoParkMailRu20251ChillGuysInternalModels(out, v3)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		easyjson120d1ca2EncodeGithubComGoParkMailRu20251ChillGuysInternalModels1(out, in.Address)
	}
	{
		const prefix string = ",\"expectedDeliveryAt\":"
		out.RawString(prefix)
		if in.ExpectedDeliveryAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ExpectedDeliveryAt).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"actualDeliveryAt\":"
		out.RawString(prefix)
		if in.ActualDeliveryAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ActualDeliveryAt).MarshalJSON())
		}
	}
	if in.CreatedAt != nil {
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.Raw((*in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderPreviewDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderPreviewDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderPreviewDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderPreviewDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(l, v)
}
func easyjson120d1ca2DecodeGithubComGoParkMailRu20251ChillGuysInternalModels1(in *jlexer.Lexer, out *models.AddressDB) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "label":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Label).UnmarshalJSON(data))
			}
		case "region":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Region).UnmarshalJSON(data))
			}
		case "city":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.City).UnmarshalJSON(data))
			}
		case "AddressString":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AddressString).UnmarshalJSON(data))
			}
		case "coordinate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Coordinate).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodeGithubComGoParkMailRu20251ChillGuysInternalModels1(out *jwriter.Writer, in models.AddressDB) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"label\":"
		out.RawString(prefix)
		out.Raw((in.Label).MarshalJSON())
	}
	{
		const prefix string = ",\"region\":"
		out.RawString(prefix)
		out.Raw((in.Region).MarshalJSON())
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.Raw((in.City).MarshalJSON())
	}
	{
		const prefix string = ",\"AddressString\":"
		out.RawString(prefix)
		out.Raw((in.AddressString).MarshalJSON())
	}
	{
		const prefix string = ",\"coordinate\":"
		out.RawString(prefix)
		out.Raw((in.Coordinate).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson120d1ca2DecodeGithubComGoParkMailRu20251ChillGuysInternalModels(in *jlexer.Lexer, out *models.OrderPreviewProductDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ProductImageURL":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ProductImageURL).UnmarshalJSON(data))
			}
		case "ProductQuantity":
			out.ProductQuantity = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodeGithubComGoParkMailRu20251ChillGuysInternalModels(out *jwriter.Writer, in models.OrderPreviewProductDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ProductImageURL\":"
		out.RawString(prefix[1:])
		out.Raw((in.ProductImageURL).MarshalJSON())
	}
	{
		const prefix string = ",\"ProductQuantity\":"
		out.RawString(prefix)
		out.Uint(uint(in.ProductQuantity))
	}
	out.RawByte('}')
}
func easyjson120d1ca2DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(in *jlexer.Lexer, out *Order) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "UserID":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UserID).UnmarshalText(data))
			}
		case "Status":
			out.Status = models.OrderStatus(in.Int())
		case "TotalPrice":
			out.TotalPrice = float64(in.Float64())
		case "TotalPriceDiscount":
			out.TotalPriceDiscount = float64(in.Float64())
		case "AddressID":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.AddressID).UnmarshalText(data))
			}
		case "Items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]CreateOrderItemDTO, 0, 1)
					} else {
						out.Items = []CreateOrderItemDTO{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v4 CreateOrderItemDTO
					(v4).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(out *jwriter.Writer, in Order) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"UserID\":"
		out.RawString(prefix)
		out.RawText((in.UserID).MarshalText())
	}
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix)
		out.Raw((in.Status).MarshalJSON())
	}
	{
		const prefix string = ",\"TotalPrice\":"
		out.RawString(prefix)
		out.Float64(float64(in.TotalPrice))
	}
	{
		const prefix string = ",\"TotalPriceDiscount\":"
		out.RawString(prefix)
		out.Float64(float64(in.TotalPriceDiscount))
	}
	{
		const prefix string = ",\"AddressID\":"
		out.RawString(prefix)
		out.RawText((in.AddressID).MarshalText())
	}
	{
		const prefix string = ",\"Items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Items {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Order) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Order) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Order) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Order) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(l, v)
}
func easyjson120d1ca2DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto3(in *jlexer.Lexer, out *GetOrderProductResDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "productID":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ProductID).UnmarshalText(data))
			}
		case "quantity":
			out.Quantity = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto3(out *jwriter.Writer, in GetOrderProductResDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"productID\":"
		out.RawString(prefix[1:])
		out.RawText((in.ProductID).MarshalText())
	}
	{
		const prefix string = ",\"quantity\":"
		out.RawString(prefix)
		out.Uint(uint(in.Quantity))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetOrderProductResDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetOrderProductResDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetOrderProductResDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetOrderProductResDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto3(l, v)
}
func easyjson120d1ca2DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto4(in *jlexer.Lexer, out *GetOrderByUserIDResDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "status":
			out.Status = models.OrderStatus(in.Int())
		case "totalPrice":
			out.TotalPrice = float64(in.Float64())
		case "totalPriceDiscount":
			out.TotalPriceDiscount = float64(in.Float64())
		case "addressID":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.AddressID).UnmarshalText(data))
			}
		case "expectedDeliveryAt":
			if in.IsNull() {
				in.Skip()
				out.ExpectedDeliveryAt = nil
			} else {
				if out.ExpectedDeliveryAt == nil {
					out.ExpectedDeliveryAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ExpectedDeliveryAt).UnmarshalJSON(data))
				}
			}
		case "actualDeliveryAt":
			if in.IsNull() {
				in.Skip()
				out.ActualDeliveryAt = nil
			} else {
				if out.ActualDeliveryAt == nil {
					out.ActualDeliveryAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ActualDeliveryAt).UnmarshalJSON(data))
				}
			}
		case "createdAt":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto4(out *jwriter.Writer, in GetOrderByUserIDResDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Raw((in.Status).MarshalJSON())
	}
	{
		const prefix string = ",\"totalPrice\":"
		out.RawString(prefix)
		out.Float64(float64(in.TotalPrice))
	}
	{
		const prefix string = ",\"totalPriceDiscount\":"
		out.RawString(prefix)
		out.Float64(float64(in.TotalPriceDiscount))
	}
	{
		const prefix string = ",\"addressID\":"
		out.RawString(prefix)
		out.RawText((in.AddressID).MarshalText())
	}
	{
		const prefix string = ",\"expectedDeliveryAt\":"
		out.RawString(prefix)
		if in.ExpectedDeliveryAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ExpectedDeliveryAt).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"actualDeliveryAt\":"
		out.RawString(prefix)
		if in.ActualDeliveryAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ActualDeliveryAt).MarshalJSON())
		}
	}
	if in.CreatedAt != nil {
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.Raw((*in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetOrderByUserIDResDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetOrderByUserIDResDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetOrderByUserIDResDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetOrderByUserIDResDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto4(l, v)
}
func easyjson120d1ca2DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto5(in *jlexer.Lexer, out *CreateOrderRepoReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Order":
			if in.IsNull() {
				in.Skip()
				out.Order = nil
			} else {
				if out.Order == nil {
					out.Order = new(Order)
				}
				(*out.Order).UnmarshalEasyJSON(in)
			}
		case "UpdatedQuantities":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.UpdatedQuantities = make(map[uuid.UUID]uint)
				for !in.IsDelim('}') {
					var key uuid.UUID
					if data := in.UnsafeBytes(); in.Ok() {
						in.AddError(key.UnmarshalText(data))
					}
					in.WantColon()
					var v7 uint
					v7 = uint(in.Uint())
					(out.UpdatedQuantities)[key] = v7
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto5(out *jwriter.Writer, in CreateOrderRepoReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Order\":"
		out.RawString(prefix[1:])
		if in.Order == nil {
			out.RawString("null")
		} else {
			(*in.Order).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"UpdatedQuantities\":"
		out.RawString(prefix)
		if in.UpdatedQuantities == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.UpdatedQuantities {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.RawBytesString((v8Name).MarshalText())
				out.RawByte(':')
				out.Uint(uint(v8Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateOrderRepoReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateOrderRepoReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateOrderRepoReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateOrderRepoReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto5(l, v)
}
func easyjson120d1ca2DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto6(in *jlexer.Lexer, out *CreateOrderItemDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "productID":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ProductID).UnmarshalText(data))
			}
		case "productPrice":
			out.Price = float64(in.Float64())
		case "quantity":
			out.Quantity = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto6(out *jwriter.Writer, in CreateOrderItemDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"productID\":"
		out.RawString(prefix)
		out.RawText((in.ProductID).MarshalText())
	}
	{
		const prefix string = ",\"productPrice\":"
		out.RawString(prefix)
		out.Float64(float64(in.Price))
	}
	{
		const prefix string = ",\"quantity\":"
		out.RawString(prefix)
		out.Uint(uint(in.Quantity))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateOrderItemDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateOrderItemDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateOrderItemDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateOrderItemDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto6(l, v)
}
func easyjson120d1ca2DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto7(in *jlexer.Lexer, out *CreateOrderDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UserID":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UserID).UnmarshalText(data))
			}
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]CreateOrderItemDTO, 0, 1)
					} else {
						out.Items = []CreateOrderItemDTO{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v9 CreateOrderItemDTO
					(v9).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "addressID":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.AddressID).UnmarshalText(data))
			}
		case "promoCode":
			if in.IsNull() {
				in.Skip()
				out.PromoCode = nil
			} else {
				if out.PromoCode == nil {
					out.PromoCode = new(string)
				}
				*out.PromoCode = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto7(out *jwriter.Writer, in CreateOrderDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UserID\":"
		out.RawString(prefix[1:])
		out.RawText((in.UserID).MarshalText())
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Items {
				if v10 > 0 {
					out.RawByte(',')
				}
				(v11).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"addressID\":"
		out.RawString(prefix)
		out.RawText((in.AddressID).MarshalText())
	}
	if in.PromoCode != nil {
		const prefix string = ",\"promoCode\":"
		out.RawString(prefix)
		out.String(string(*in.PromoCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateOrderDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateOrderDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateOrderDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateOrderDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto7(l, v)
}
