// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	models "github.com/go-park-mail-ru/2025_1_ChillGuys/internal/models"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonCee004caDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(in *jlexer.Lexer, out *UpdateQuantityResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "item":
			if in.IsNull() {
				in.Skip()
				out.Item = nil
			} else {
				if out.Item == nil {
					out.Item = new(models.BasketItem)
				}
				easyjsonCee004caDecodeGithubComGoParkMailRu20251ChillGuysInternalModels(in, out.Item)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCee004caEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(out *jwriter.Writer, in UpdateQuantityResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"item\":"
		out.RawString(prefix[1:])
		if in.Item == nil {
			out.RawString("null")
		} else {
			easyjsonCee004caEncodeGithubComGoParkMailRu20251ChillGuysInternalModels(out, *in.Item)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateQuantityResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCee004caEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateQuantityResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCee004caEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateQuantityResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCee004caDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateQuantityResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCee004caDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(l, v)
}
func easyjsonCee004caDecodeGithubComGoParkMailRu20251ChillGuysInternalModels(in *jlexer.Lexer, out *models.BasketItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "basket_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.BasketID).UnmarshalText(data))
			}
		case "product_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ProductID).UnmarshalText(data))
			}
		case "quantity":
			out.Quantity = int(in.Int())
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "product_name":
			out.ProductName = string(in.String())
		case "product_price":
			out.Price = float64(in.Float64())
		case "product_image":
			out.ProductImage = string(in.String())
		case "price_discount":
			out.PriceDiscount = float64(in.Float64())
		case "remain_quantity":
			out.QuantityRemain = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCee004caEncodeGithubComGoParkMailRu20251ChillGuysInternalModels(out *jwriter.Writer, in models.BasketItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"basket_id\":"
		out.RawString(prefix)
		out.RawText((in.BasketID).MarshalText())
	}
	{
		const prefix string = ",\"product_id\":"
		out.RawString(prefix)
		out.RawText((in.ProductID).MarshalText())
	}
	{
		const prefix string = ",\"quantity\":"
		out.RawString(prefix)
		out.Int(int(in.Quantity))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"product_name\":"
		out.RawString(prefix)
		out.String(string(in.ProductName))
	}
	{
		const prefix string = ",\"product_price\":"
		out.RawString(prefix)
		out.Float64(float64(in.Price))
	}
	{
		const prefix string = ",\"product_image\":"
		out.RawString(prefix)
		out.String(string(in.ProductImage))
	}
	{
		const prefix string = ",\"price_discount\":"
		out.RawString(prefix)
		out.Float64(float64(in.PriceDiscount))
	}
	{
		const prefix string = ",\"remain_quantity\":"
		out.RawString(prefix)
		out.Int(int(in.QuantityRemain))
	}
	out.RawByte('}')
}
func easyjsonCee004caDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(in *jlexer.Lexer, out *UpdateQuantityRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "quantity":
			out.Quantity = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCee004caEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(out *jwriter.Writer, in UpdateQuantityRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"quantity\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Quantity))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateQuantityRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCee004caEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateQuantityRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCee004caEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateQuantityRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCee004caDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateQuantityRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCee004caDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(l, v)
}
func easyjsonCee004caDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(in *jlexer.Lexer, out *BasketResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "total":
			out.Total = int(in.Int())
		case "total_price":
			out.TotalPrice = float64(in.Float64())
		case "total_price_discount":
			out.TotalPriceDiscount = float64(in.Float64())
		case "products":
			if in.IsNull() {
				in.Skip()
				out.Products = nil
			} else {
				in.Delim('[')
				if out.Products == nil {
					if !in.IsDelim(']') {
						out.Products = make([]models.BasketItem, 0, 0)
					} else {
						out.Products = []models.BasketItem{}
					}
				} else {
					out.Products = (out.Products)[:0]
				}
				for !in.IsDelim(']') {
					var v1 models.BasketItem
					easyjsonCee004caDecodeGithubComGoParkMailRu20251ChillGuysInternalModels(in, &v1)
					out.Products = append(out.Products, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCee004caEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(out *jwriter.Writer, in BasketResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Total))
	}
	{
		const prefix string = ",\"total_price\":"
		out.RawString(prefix)
		out.Float64(float64(in.TotalPrice))
	}
	{
		const prefix string = ",\"total_price_discount\":"
		out.RawString(prefix)
		out.Float64(float64(in.TotalPriceDiscount))
	}
	{
		const prefix string = ",\"products\":"
		out.RawString(prefix)
		if in.Products == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Products {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjsonCee004caEncodeGithubComGoParkMailRu20251ChillGuysInternalModels(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BasketResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCee004caEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BasketResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCee004caEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BasketResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCee004caDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BasketResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCee004caDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(l, v)
}
