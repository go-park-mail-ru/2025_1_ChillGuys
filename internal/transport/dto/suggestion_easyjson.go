// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	models "github.com/go-park-mail-ru/2025_1_ChillGuys/internal/models"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF34c9ac8DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(in *jlexer.Lexer, out *SuggestionsReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "category_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CategoryID).UnmarshalJSON(data))
			}
		case "sub_string":
			out.SubString = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF34c9ac8EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(out *jwriter.Writer, in SuggestionsReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"category_id\":"
		out.RawString(prefix[1:])
		out.Raw((in.CategoryID).MarshalJSON())
	}
	{
		const prefix string = ",\"sub_string\":"
		out.RawString(prefix)
		out.String(string(in.SubString))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SuggestionsReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF34c9ac8EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SuggestionsReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF34c9ac8EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SuggestionsReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF34c9ac8DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SuggestionsReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF34c9ac8DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(l, v)
}
func easyjsonF34c9ac8DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(in *jlexer.Lexer, out *ProductNameResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "product_names":
			if in.IsNull() {
				in.Skip()
				out.ProductNames = nil
			} else {
				in.Delim('[')
				if out.ProductNames == nil {
					if !in.IsDelim(']') {
						out.ProductNames = make([]models.ProductSuggestion, 0, 4)
					} else {
						out.ProductNames = []models.ProductSuggestion{}
					}
				} else {
					out.ProductNames = (out.ProductNames)[:0]
				}
				for !in.IsDelim(']') {
					var v1 models.ProductSuggestion
					easyjsonF34c9ac8DecodeGithubComGoParkMailRu20251ChillGuysInternalModels(in, &v1)
					out.ProductNames = append(out.ProductNames, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF34c9ac8EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(out *jwriter.Writer, in ProductNameResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"product_names\":"
		out.RawString(prefix[1:])
		if in.ProductNames == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.ProductNames {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjsonF34c9ac8EncodeGithubComGoParkMailRu20251ChillGuysInternalModels(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProductNameResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF34c9ac8EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProductNameResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF34c9ac8EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProductNameResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF34c9ac8DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProductNameResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF34c9ac8DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(l, v)
}
func easyjsonF34c9ac8DecodeGithubComGoParkMailRu20251ChillGuysInternalModels(in *jlexer.Lexer, out *models.ProductSuggestion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF34c9ac8EncodeGithubComGoParkMailRu20251ChillGuysInternalModels(out *jwriter.Writer, in models.ProductSuggestion) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjsonF34c9ac8DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(in *jlexer.Lexer, out *CombinedSuggestionsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "categories":
			if in.IsNull() {
				in.Skip()
				out.Categories = nil
			} else {
				in.Delim('[')
				if out.Categories == nil {
					if !in.IsDelim(']') {
						out.Categories = make([]models.CategorySuggestion, 0, 4)
					} else {
						out.Categories = []models.CategorySuggestion{}
					}
				} else {
					out.Categories = (out.Categories)[:0]
				}
				for !in.IsDelim(']') {
					var v4 models.CategorySuggestion
					easyjsonF34c9ac8DecodeGithubComGoParkMailRu20251ChillGuysInternalModels1(in, &v4)
					out.Categories = append(out.Categories, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "products":
			if in.IsNull() {
				in.Skip()
				out.Products = nil
			} else {
				in.Delim('[')
				if out.Products == nil {
					if !in.IsDelim(']') {
						out.Products = make([]models.ProductSuggestion, 0, 4)
					} else {
						out.Products = []models.ProductSuggestion{}
					}
				} else {
					out.Products = (out.Products)[:0]
				}
				for !in.IsDelim(']') {
					var v5 models.ProductSuggestion
					easyjsonF34c9ac8DecodeGithubComGoParkMailRu20251ChillGuysInternalModels(in, &v5)
					out.Products = append(out.Products, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF34c9ac8EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(out *jwriter.Writer, in CombinedSuggestionsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"categories\":"
		out.RawString(prefix[1:])
		if in.Categories == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Categories {
				if v6 > 0 {
					out.RawByte(',')
				}
				easyjsonF34c9ac8EncodeGithubComGoParkMailRu20251ChillGuysInternalModels1(out, v7)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"products\":"
		out.RawString(prefix)
		if in.Products == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Products {
				if v8 > 0 {
					out.RawByte(',')
				}
				easyjsonF34c9ac8EncodeGithubComGoParkMailRu20251ChillGuysInternalModels(out, v9)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CombinedSuggestionsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF34c9ac8EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CombinedSuggestionsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF34c9ac8EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CombinedSuggestionsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF34c9ac8DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CombinedSuggestionsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF34c9ac8DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(l, v)
}
func easyjsonF34c9ac8DecodeGithubComGoParkMailRu20251ChillGuysInternalModels1(in *jlexer.Lexer, out *models.CategorySuggestion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF34c9ac8EncodeGithubComGoParkMailRu20251ChillGuysInternalModels1(out *jwriter.Writer, in models.CategorySuggestion) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjsonF34c9ac8DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto3(in *jlexer.Lexer, out *CategoryNameResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "categories_names":
			if in.IsNull() {
				in.Skip()
				out.CategoriesNames = nil
			} else {
				in.Delim('[')
				if out.CategoriesNames == nil {
					if !in.IsDelim(']') {
						out.CategoriesNames = make([]models.CategorySuggestion, 0, 4)
					} else {
						out.CategoriesNames = []models.CategorySuggestion{}
					}
				} else {
					out.CategoriesNames = (out.CategoriesNames)[:0]
				}
				for !in.IsDelim(']') {
					var v10 models.CategorySuggestion
					easyjsonF34c9ac8DecodeGithubComGoParkMailRu20251ChillGuysInternalModels1(in, &v10)
					out.CategoriesNames = append(out.CategoriesNames, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF34c9ac8EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto3(out *jwriter.Writer, in CategoryNameResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"categories_names\":"
		out.RawString(prefix[1:])
		if in.CategoriesNames == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.CategoriesNames {
				if v11 > 0 {
					out.RawByte(',')
				}
				easyjsonF34c9ac8EncodeGithubComGoParkMailRu20251ChillGuysInternalModels1(out, v12)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CategoryNameResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF34c9ac8EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CategoryNameResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF34c9ac8EncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CategoryNameResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF34c9ac8DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CategoryNameResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF34c9ac8DecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto3(l, v)
}
