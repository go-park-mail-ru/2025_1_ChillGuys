// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9280440fDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(in *jlexer.Lexer, out *UsersResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "total":
			out.Total = int(in.Int())
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]BriefUser, 0, 0)
					} else {
						out.Users = []BriefUser{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v1 BriefUser
					(v1).UnmarshalEasyJSON(in)
					out.Users = append(out.Users, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9280440fEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(out *jwriter.Writer, in UsersResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Total))
	}
	{
		const prefix string = ",\"users\":"
		out.RawString(prefix)
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Users {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UsersResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9280440fEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UsersResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9280440fEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UsersResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9280440fDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UsersResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9280440fDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto(l, v)
}
func easyjson9280440fDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(in *jlexer.Lexer, out *UpdateUserRoleRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userID":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UserID).UnmarshalText(data))
			}
		case "update":
			out.Update = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9280440fEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(out *jwriter.Writer, in UpdateUserRoleRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix[1:])
		out.RawText((in.UserID).MarshalText())
	}
	{
		const prefix string = ",\"update\":"
		out.RawString(prefix)
		out.Int(int(in.Update))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateUserRoleRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9280440fEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateUserRoleRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9280440fEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateUserRoleRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9280440fDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateUserRoleRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9280440fDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto1(l, v)
}
func easyjson9280440fDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(in *jlexer.Lexer, out *UpdateProductStatusRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "productID":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ProductID).UnmarshalText(data))
			}
		case "update":
			out.Update = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9280440fEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(out *jwriter.Writer, in UpdateProductStatusRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"productID\":"
		out.RawString(prefix[1:])
		out.RawText((in.ProductID).MarshalText())
	}
	{
		const prefix string = ",\"update\":"
		out.RawString(prefix)
		out.Int(int(in.Update))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateProductStatusRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9280440fEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateProductStatusRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9280440fEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateProductStatusRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9280440fDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateProductStatusRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9280440fDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto2(l, v)
}
func easyjson9280440fDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto3(in *jlexer.Lexer, out *SellerInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9280440fEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto3(out *jwriter.Writer, in SellerInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SellerInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9280440fEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SellerInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9280440fEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SellerInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9280440fDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SellerInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9280440fDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto3(l, v)
}
func easyjson9280440fDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto4(in *jlexer.Lexer, out *BriefUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "email":
			out.Email = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "surname":
			out.Surname = string(in.String())
		case "image":
			out.ImageURL = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		case "role":
			out.Role = string(in.String())
		case "seller_info":
			if in.IsNull() {
				in.Skip()
				out.SellerInfo = nil
			} else {
				if out.SellerInfo == nil {
					out.SellerInfo = new(SellerInfo)
				}
				(*out.SellerInfo).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9280440fEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto4(out *jwriter.Writer, in BriefUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.Surname != "" {
		const prefix string = ",\"surname\":"
		out.RawString(prefix)
		out.String(string(in.Surname))
	}
	if in.ImageURL != "" {
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.ImageURL))
	}
	if in.Phone != "" {
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Role))
	}
	if in.SellerInfo != nil {
		const prefix string = ",\"seller_info\":"
		out.RawString(prefix)
		(*in.SellerInfo).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BriefUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9280440fEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BriefUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9280440fEncodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BriefUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9280440fDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BriefUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9280440fDecodeGithubComGoParkMailRu20251ChillGuysInternalTransportDto4(l, v)
}
