// Code generated by MockGen. DO NOT EDIT.
// Source: review_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	review "github.com/go-park-mail-ru/2025_1_ChillGuys/internal/transport/generated/review"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockReviewServiceClient is a mock of ReviewServiceClient interface.
type MockReviewServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockReviewServiceClientMockRecorder
}

// MockReviewServiceClientMockRecorder is the mock recorder for MockReviewServiceClient.
type MockReviewServiceClientMockRecorder struct {
	mock *MockReviewServiceClient
}

// NewMockReviewServiceClient creates a new mock instance.
func NewMockReviewServiceClient(ctrl *gomock.Controller) *MockReviewServiceClient {
	mock := &MockReviewServiceClient{ctrl: ctrl}
	mock.recorder = &MockReviewServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReviewServiceClient) EXPECT() *MockReviewServiceClientMockRecorder {
	return m.recorder
}

// AddReview mocks base method.
func (m *MockReviewServiceClient) AddReview(ctx context.Context, in *review.AddReviewRequest, opts ...grpc.CallOption) (*review.EmptyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddReview", varargs...)
	ret0, _ := ret[0].(*review.EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddReview indicates an expected call of AddReview.
func (mr *MockReviewServiceClientMockRecorder) AddReview(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReview", reflect.TypeOf((*MockReviewServiceClient)(nil).AddReview), varargs...)
}

// GetReviews mocks base method.
func (m *MockReviewServiceClient) GetReviews(ctx context.Context, in *review.GetReviewsRequest, opts ...grpc.CallOption) (*review.GetReviewsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReviews", varargs...)
	ret0, _ := ret[0].(*review.GetReviewsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviews indicates an expected call of GetReviews.
func (mr *MockReviewServiceClientMockRecorder) GetReviews(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviews", reflect.TypeOf((*MockReviewServiceClient)(nil).GetReviews), varargs...)
}

// MockReviewServiceServer is a mock of ReviewServiceServer interface.
type MockReviewServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockReviewServiceServerMockRecorder
}

// MockReviewServiceServerMockRecorder is the mock recorder for MockReviewServiceServer.
type MockReviewServiceServerMockRecorder struct {
	mock *MockReviewServiceServer
}

// NewMockReviewServiceServer creates a new mock instance.
func NewMockReviewServiceServer(ctrl *gomock.Controller) *MockReviewServiceServer {
	mock := &MockReviewServiceServer{ctrl: ctrl}
	mock.recorder = &MockReviewServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReviewServiceServer) EXPECT() *MockReviewServiceServerMockRecorder {
	return m.recorder
}

// AddReview mocks base method.
func (m *MockReviewServiceServer) AddReview(arg0 context.Context, arg1 *review.AddReviewRequest) (*review.EmptyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReview", arg0, arg1)
	ret0, _ := ret[0].(*review.EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddReview indicates an expected call of AddReview.
func (mr *MockReviewServiceServerMockRecorder) AddReview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReview", reflect.TypeOf((*MockReviewServiceServer)(nil).AddReview), arg0, arg1)
}

// GetReviews mocks base method.
func (m *MockReviewServiceServer) GetReviews(arg0 context.Context, arg1 *review.GetReviewsRequest) (*review.GetReviewsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviews", arg0, arg1)
	ret0, _ := ret[0].(*review.GetReviewsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviews indicates an expected call of GetReviews.
func (mr *MockReviewServiceServerMockRecorder) GetReviews(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviews", reflect.TypeOf((*MockReviewServiceServer)(nil).GetReviews), arg0, arg1)
}

// mustEmbedUnimplementedReviewServiceServer mocks base method.
func (m *MockReviewServiceServer) mustEmbedUnimplementedReviewServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedReviewServiceServer")
}

// mustEmbedUnimplementedReviewServiceServer indicates an expected call of mustEmbedUnimplementedReviewServiceServer.
func (mr *MockReviewServiceServerMockRecorder) mustEmbedUnimplementedReviewServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedReviewServiceServer", reflect.TypeOf((*MockReviewServiceServer)(nil).mustEmbedUnimplementedReviewServiceServer))
}

// MockUnsafeReviewServiceServer is a mock of UnsafeReviewServiceServer interface.
type MockUnsafeReviewServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeReviewServiceServerMockRecorder
}

// MockUnsafeReviewServiceServerMockRecorder is the mock recorder for MockUnsafeReviewServiceServer.
type MockUnsafeReviewServiceServerMockRecorder struct {
	mock *MockUnsafeReviewServiceServer
}

// NewMockUnsafeReviewServiceServer creates a new mock instance.
func NewMockUnsafeReviewServiceServer(ctrl *gomock.Controller) *MockUnsafeReviewServiceServer {
	mock := &MockUnsafeReviewServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeReviewServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeReviewServiceServer) EXPECT() *MockUnsafeReviewServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedReviewServiceServer mocks base method.
func (m *MockUnsafeReviewServiceServer) mustEmbedUnimplementedReviewServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedReviewServiceServer")
}

// mustEmbedUnimplementedReviewServiceServer indicates an expected call of mustEmbedUnimplementedReviewServiceServer.
func (mr *MockUnsafeReviewServiceServerMockRecorder) mustEmbedUnimplementedReviewServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedReviewServiceServer", reflect.TypeOf((*MockUnsafeReviewServiceServer)(nil).mustEmbedUnimplementedReviewServiceServer))
}
