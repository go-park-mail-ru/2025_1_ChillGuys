// Code generated by MockGen. DO NOT EDIT.
// Source: csat_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	csat "github.com/go-park-mail-ru/2025_1_ChillGuys/internal/transport/generated/csat"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockSurveyServiceClient is a mock of SurveyServiceClient interface.
type MockSurveyServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSurveyServiceClientMockRecorder
}

// MockSurveyServiceClientMockRecorder is the mock recorder for MockSurveyServiceClient.
type MockSurveyServiceClientMockRecorder struct {
	mock *MockSurveyServiceClient
}

// NewMockSurveyServiceClient creates a new mock instance.
func NewMockSurveyServiceClient(ctrl *gomock.Controller) *MockSurveyServiceClient {
	mock := &MockSurveyServiceClient{ctrl: ctrl}
	mock.recorder = &MockSurveyServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSurveyServiceClient) EXPECT() *MockSurveyServiceClientMockRecorder {
	return m.recorder
}

// GetAllSurveys mocks base method.
func (m *MockSurveyServiceClient) GetAllSurveys(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*csat.SurveysList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllSurveys", varargs...)
	ret0, _ := ret[0].(*csat.SurveysList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSurveys indicates an expected call of GetAllSurveys.
func (mr *MockSurveyServiceClientMockRecorder) GetAllSurveys(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSurveys", reflect.TypeOf((*MockSurveyServiceClient)(nil).GetAllSurveys), varargs...)
}

// GetSurveyStatistics mocks base method.
func (m *MockSurveyServiceClient) GetSurveyStatistics(ctx context.Context, in *csat.GetStatisticsRequest, opts ...grpc.CallOption) (*csat.SurveyStatisticsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSurveyStatistics", varargs...)
	ret0, _ := ret[0].(*csat.SurveyStatisticsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSurveyStatistics indicates an expected call of GetSurveyStatistics.
func (mr *MockSurveyServiceClientMockRecorder) GetSurveyStatistics(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSurveyStatistics", reflect.TypeOf((*MockSurveyServiceClient)(nil).GetSurveyStatistics), varargs...)
}

// GetSurveyWithQuestions mocks base method.
func (m *MockSurveyServiceClient) GetSurveyWithQuestions(ctx context.Context, in *csat.GetSurveyRequest, opts ...grpc.CallOption) (*csat.SurveyWithQuestionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSurveyWithQuestions", varargs...)
	ret0, _ := ret[0].(*csat.SurveyWithQuestionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSurveyWithQuestions indicates an expected call of GetSurveyWithQuestions.
func (mr *MockSurveyServiceClientMockRecorder) GetSurveyWithQuestions(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSurveyWithQuestions", reflect.TypeOf((*MockSurveyServiceClient)(nil).GetSurveyWithQuestions), varargs...)
}

// SubmitAnswer mocks base method.
func (m *MockSurveyServiceClient) SubmitAnswer(ctx context.Context, in *csat.SubmitAnswerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubmitAnswer", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitAnswer indicates an expected call of SubmitAnswer.
func (mr *MockSurveyServiceClientMockRecorder) SubmitAnswer(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitAnswer", reflect.TypeOf((*MockSurveyServiceClient)(nil).SubmitAnswer), varargs...)
}

// MockSurveyServiceServer is a mock of SurveyServiceServer interface.
type MockSurveyServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSurveyServiceServerMockRecorder
}

// MockSurveyServiceServerMockRecorder is the mock recorder for MockSurveyServiceServer.
type MockSurveyServiceServerMockRecorder struct {
	mock *MockSurveyServiceServer
}

// NewMockSurveyServiceServer creates a new mock instance.
func NewMockSurveyServiceServer(ctrl *gomock.Controller) *MockSurveyServiceServer {
	mock := &MockSurveyServiceServer{ctrl: ctrl}
	mock.recorder = &MockSurveyServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSurveyServiceServer) EXPECT() *MockSurveyServiceServerMockRecorder {
	return m.recorder
}

// GetAllSurveys mocks base method.
func (m *MockSurveyServiceServer) GetAllSurveys(arg0 context.Context, arg1 *emptypb.Empty) (*csat.SurveysList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSurveys", arg0, arg1)
	ret0, _ := ret[0].(*csat.SurveysList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSurveys indicates an expected call of GetAllSurveys.
func (mr *MockSurveyServiceServerMockRecorder) GetAllSurveys(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSurveys", reflect.TypeOf((*MockSurveyServiceServer)(nil).GetAllSurveys), arg0, arg1)
}

// GetSurveyStatistics mocks base method.
func (m *MockSurveyServiceServer) GetSurveyStatistics(arg0 context.Context, arg1 *csat.GetStatisticsRequest) (*csat.SurveyStatisticsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSurveyStatistics", arg0, arg1)
	ret0, _ := ret[0].(*csat.SurveyStatisticsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSurveyStatistics indicates an expected call of GetSurveyStatistics.
func (mr *MockSurveyServiceServerMockRecorder) GetSurveyStatistics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSurveyStatistics", reflect.TypeOf((*MockSurveyServiceServer)(nil).GetSurveyStatistics), arg0, arg1)
}

// GetSurveyWithQuestions mocks base method.
func (m *MockSurveyServiceServer) GetSurveyWithQuestions(arg0 context.Context, arg1 *csat.GetSurveyRequest) (*csat.SurveyWithQuestionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSurveyWithQuestions", arg0, arg1)
	ret0, _ := ret[0].(*csat.SurveyWithQuestionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSurveyWithQuestions indicates an expected call of GetSurveyWithQuestions.
func (mr *MockSurveyServiceServerMockRecorder) GetSurveyWithQuestions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSurveyWithQuestions", reflect.TypeOf((*MockSurveyServiceServer)(nil).GetSurveyWithQuestions), arg0, arg1)
}

// SubmitAnswer mocks base method.
func (m *MockSurveyServiceServer) SubmitAnswer(arg0 context.Context, arg1 *csat.SubmitAnswerRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitAnswer", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitAnswer indicates an expected call of SubmitAnswer.
func (mr *MockSurveyServiceServerMockRecorder) SubmitAnswer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitAnswer", reflect.TypeOf((*MockSurveyServiceServer)(nil).SubmitAnswer), arg0, arg1)
}

// mustEmbedUnimplementedSurveyServiceServer mocks base method.
func (m *MockSurveyServiceServer) mustEmbedUnimplementedSurveyServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSurveyServiceServer")
}

// mustEmbedUnimplementedSurveyServiceServer indicates an expected call of mustEmbedUnimplementedSurveyServiceServer.
func (mr *MockSurveyServiceServerMockRecorder) mustEmbedUnimplementedSurveyServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSurveyServiceServer", reflect.TypeOf((*MockSurveyServiceServer)(nil).mustEmbedUnimplementedSurveyServiceServer))
}

// MockUnsafeSurveyServiceServer is a mock of UnsafeSurveyServiceServer interface.
type MockUnsafeSurveyServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSurveyServiceServerMockRecorder
}

// MockUnsafeSurveyServiceServerMockRecorder is the mock recorder for MockUnsafeSurveyServiceServer.
type MockUnsafeSurveyServiceServerMockRecorder struct {
	mock *MockUnsafeSurveyServiceServer
}

// NewMockUnsafeSurveyServiceServer creates a new mock instance.
func NewMockUnsafeSurveyServiceServer(ctrl *gomock.Controller) *MockUnsafeSurveyServiceServer {
	mock := &MockUnsafeSurveyServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSurveyServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSurveyServiceServer) EXPECT() *MockUnsafeSurveyServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSurveyServiceServer mocks base method.
func (m *MockUnsafeSurveyServiceServer) mustEmbedUnimplementedSurveyServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSurveyServiceServer")
}

// mustEmbedUnimplementedSurveyServiceServer indicates an expected call of mustEmbedUnimplementedSurveyServiceServer.
func (mr *MockUnsafeSurveyServiceServerMockRecorder) mustEmbedUnimplementedSurveyServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSurveyServiceServer", reflect.TypeOf((*MockUnsafeSurveyServiceServer)(nil).mustEmbedUnimplementedSurveyServiceServer))
}
