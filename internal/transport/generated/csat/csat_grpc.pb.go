// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: csat.proto

package csat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SurveyService_GetSurveyWithQuestions_FullMethodName = "/csat.SurveyService/GetSurveyWithQuestions"
	SurveyService_SubmitAnswer_FullMethodName           = "/csat.SurveyService/SubmitAnswer"
	SurveyService_GetSurveyStatistics_FullMethodName    = "/csat.SurveyService/GetSurveyStatistics"
	SurveyService_GetAllSurveys_FullMethodName          = "/csat.SurveyService/GetAllSurveys"
)

// SurveyServiceClient is the client API for SurveyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ############### SurveyService ###############
type SurveyServiceClient interface {
	// Получение опроса с вопросами
	GetSurveyWithQuestions(ctx context.Context, in *GetSurveyRequest, opts ...grpc.CallOption) (*SurveyWithQuestionsResponse, error)
	// Отправка ответов на опрос
	SubmitAnswer(ctx context.Context, in *SubmitAnswerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Получение статистики по опросу
	GetSurveyStatistics(ctx context.Context, in *GetStatisticsRequest, opts ...grpc.CallOption) (*SurveyStatisticsResponse, error)
	// Получение всех опросов
	GetAllSurveys(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SurveysList, error)
}

type surveyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSurveyServiceClient(cc grpc.ClientConnInterface) SurveyServiceClient {
	return &surveyServiceClient{cc}
}

func (c *surveyServiceClient) GetSurveyWithQuestions(ctx context.Context, in *GetSurveyRequest, opts ...grpc.CallOption) (*SurveyWithQuestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SurveyWithQuestionsResponse)
	err := c.cc.Invoke(ctx, SurveyService_GetSurveyWithQuestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) SubmitAnswer(ctx context.Context, in *SubmitAnswerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SurveyService_SubmitAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) GetSurveyStatistics(ctx context.Context, in *GetStatisticsRequest, opts ...grpc.CallOption) (*SurveyStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SurveyStatisticsResponse)
	err := c.cc.Invoke(ctx, SurveyService_GetSurveyStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) GetAllSurveys(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SurveysList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SurveysList)
	err := c.cc.Invoke(ctx, SurveyService_GetAllSurveys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SurveyServiceServer is the server API for SurveyService service.
// All implementations must embed UnimplementedSurveyServiceServer
// for forward compatibility.
//
// ############### SurveyService ###############
type SurveyServiceServer interface {
	// Получение опроса с вопросами
	GetSurveyWithQuestions(context.Context, *GetSurveyRequest) (*SurveyWithQuestionsResponse, error)
	// Отправка ответов на опрос
	SubmitAnswer(context.Context, *SubmitAnswerRequest) (*emptypb.Empty, error)
	// Получение статистики по опросу
	GetSurveyStatistics(context.Context, *GetStatisticsRequest) (*SurveyStatisticsResponse, error)
	// Получение всех опросов
	GetAllSurveys(context.Context, *emptypb.Empty) (*SurveysList, error)
	mustEmbedUnimplementedSurveyServiceServer()
}

// UnimplementedSurveyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSurveyServiceServer struct{}

func (UnimplementedSurveyServiceServer) GetSurveyWithQuestions(context.Context, *GetSurveyRequest) (*SurveyWithQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyWithQuestions not implemented")
}
func (UnimplementedSurveyServiceServer) SubmitAnswer(context.Context, *SubmitAnswerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitAnswer not implemented")
}
func (UnimplementedSurveyServiceServer) GetSurveyStatistics(context.Context, *GetStatisticsRequest) (*SurveyStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyStatistics not implemented")
}
func (UnimplementedSurveyServiceServer) GetAllSurveys(context.Context, *emptypb.Empty) (*SurveysList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSurveys not implemented")
}
func (UnimplementedSurveyServiceServer) mustEmbedUnimplementedSurveyServiceServer() {}
func (UnimplementedSurveyServiceServer) testEmbeddedByValue()                       {}

// UnsafeSurveyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SurveyServiceServer will
// result in compilation errors.
type UnsafeSurveyServiceServer interface {
	mustEmbedUnimplementedSurveyServiceServer()
}

func RegisterSurveyServiceServer(s grpc.ServiceRegistrar, srv SurveyServiceServer) {
	// If the following call pancis, it indicates UnimplementedSurveyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SurveyService_ServiceDesc, srv)
}

func _SurveyService_GetSurveyWithQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSurveyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).GetSurveyWithQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SurveyService_GetSurveyWithQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).GetSurveyWithQuestions(ctx, req.(*GetSurveyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_SubmitAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).SubmitAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SurveyService_SubmitAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).SubmitAnswer(ctx, req.(*SubmitAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_GetSurveyStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).GetSurveyStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SurveyService_GetSurveyStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).GetSurveyStatistics(ctx, req.(*GetStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_GetAllSurveys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).GetAllSurveys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SurveyService_GetAllSurveys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).GetAllSurveys(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SurveyService_ServiceDesc is the grpc.ServiceDesc for SurveyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SurveyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "csat.SurveyService",
	HandlerType: (*SurveyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSurveyWithQuestions",
			Handler:    _SurveyService_GetSurveyWithQuestions_Handler,
		},
		{
			MethodName: "SubmitAnswer",
			Handler:    _SurveyService_SubmitAnswer_Handler,
		},
		{
			MethodName: "GetSurveyStatistics",
			Handler:    _SurveyService_GetSurveyStatistics_Handler,
		},
		{
			MethodName: "GetAllSurveys",
			Handler:    _SurveyService_GetAllSurveys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "csat.proto",
}
