// Code generated by MockGen. DO NOT EDIT.
// Source: basket.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2025_1_ChillGuys/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIBasketRepository is a mock of IBasketRepository interface.
type MockIBasketRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIBasketRepositoryMockRecorder
}

// MockIBasketRepositoryMockRecorder is the mock recorder for MockIBasketRepository.
type MockIBasketRepositoryMockRecorder struct {
	mock *MockIBasketRepository
}

// NewMockIBasketRepository creates a new mock instance.
func NewMockIBasketRepository(ctrl *gomock.Controller) *MockIBasketRepository {
	mock := &MockIBasketRepository{ctrl: ctrl}
	mock.recorder = &MockIBasketRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBasketRepository) EXPECT() *MockIBasketRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockIBasketRepository) Add(ctx context.Context, userID, productID uuid.UUID) (*models.BasketItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, userID, productID)
	ret0, _ := ret[0].(*models.BasketItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockIBasketRepositoryMockRecorder) Add(ctx, userID, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIBasketRepository)(nil).Add), ctx, userID, productID)
}

// Clear mocks base method.
func (m *MockIBasketRepository) Clear(ctx context.Context, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockIBasketRepositoryMockRecorder) Clear(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockIBasketRepository)(nil).Clear), ctx, userID)
}

// Delete mocks base method.
func (m *MockIBasketRepository) Delete(ctx context.Context, userID, productID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIBasketRepositoryMockRecorder) Delete(ctx, userID, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIBasketRepository)(nil).Delete), ctx, userID, productID)
}

// Get mocks base method.
func (m *MockIBasketRepository) Get(ctx context.Context, userID uuid.UUID) ([]*models.BasketItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID)
	ret0, _ := ret[0].([]*models.BasketItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIBasketRepositoryMockRecorder) Get(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIBasketRepository)(nil).Get), ctx, userID)
}

// UpdateQuantity mocks base method.
func (m *MockIBasketRepository) UpdateQuantity(ctx context.Context, userID, productID uuid.UUID, quantity int) (*models.BasketItem, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuantity", ctx, userID, productID, quantity)
	ret0, _ := ret[0].(*models.BasketItem)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateQuantity indicates an expected call of UpdateQuantity.
func (mr *MockIBasketRepositoryMockRecorder) UpdateQuantity(ctx, userID, productID, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuantity", reflect.TypeOf((*MockIBasketRepository)(nil).UpdateQuantity), ctx, userID, productID, quantity)
}
