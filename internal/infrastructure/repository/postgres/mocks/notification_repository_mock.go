// Code generated by MockGen. DO NOT EDIT.
// Source: notification.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2025_1_ChillGuys/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockINotificationRepository is a mock of INotificationRepository interface.
type MockINotificationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockINotificationRepositoryMockRecorder
}

// MockINotificationRepositoryMockRecorder is the mock recorder for MockINotificationRepository.
type MockINotificationRepositoryMockRecorder struct {
	mock *MockINotificationRepository
}

// NewMockINotificationRepository creates a new mock instance.
func NewMockINotificationRepository(ctrl *gomock.Controller) *MockINotificationRepository {
	mock := &MockINotificationRepository{ctrl: ctrl}
	mock.recorder = &MockINotificationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockINotificationRepository) EXPECT() *MockINotificationRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockINotificationRepository) Create(ctx context.Context, notification models.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockINotificationRepositoryMockRecorder) Create(ctx, notification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockINotificationRepository)(nil).Create), ctx, notification)
}

// GetAllByUser mocks base method.
func (m *MockINotificationRepository) GetAllByUser(ctx context.Context, userID uuid.UUID, offset int) ([]models.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByUser", ctx, userID, offset)
	ret0, _ := ret[0].([]models.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByUser indicates an expected call of GetAllByUser.
func (mr *MockINotificationRepositoryMockRecorder) GetAllByUser(ctx, userID, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUser", reflect.TypeOf((*MockINotificationRepository)(nil).GetAllByUser), ctx, userID, offset)
}

// GetUnreadCount mocks base method.
func (m *MockINotificationRepository) GetUnreadCount(ctx context.Context, userID uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnreadCount", ctx, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnreadCount indicates an expected call of GetUnreadCount.
func (mr *MockINotificationRepositoryMockRecorder) GetUnreadCount(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnreadCount", reflect.TypeOf((*MockINotificationRepository)(nil).GetUnreadCount), ctx, userID)
}

// UpdateReadStatus mocks base method.
func (m *MockINotificationRepository) UpdateReadStatus(ctx context.Context, id uuid.UUID, isRead bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReadStatus", ctx, id, isRead)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReadStatus indicates an expected call of UpdateReadStatus.
func (mr *MockINotificationRepositoryMockRecorder) UpdateReadStatus(ctx, id, isRead interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReadStatus", reflect.TypeOf((*MockINotificationRepository)(nil).UpdateReadStatus), ctx, id, isRead)
}
