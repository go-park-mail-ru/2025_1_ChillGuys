// Code generated by MockGen. DO NOT EDIT.
// Source: search.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2025_1_ChillGuys/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockISearchRepository is a mock of ISearchRepository interface.
type MockISearchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockISearchRepositoryMockRecorder
}

// MockISearchRepositoryMockRecorder is the mock recorder for MockISearchRepository.
type MockISearchRepositoryMockRecorder struct {
	mock *MockISearchRepository
}

// NewMockISearchRepository creates a new mock instance.
func NewMockISearchRepository(ctrl *gomock.Controller) *MockISearchRepository {
	mock := &MockISearchRepository{ctrl: ctrl}
	mock.recorder = &MockISearchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISearchRepository) EXPECT() *MockISearchRepositoryMockRecorder {
	return m.recorder
}

// GetCategoryByName mocks base method.
func (m *MockISearchRepository) GetCategoryByName(arg0 context.Context, arg1 string) (*models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryByName", arg0, arg1)
	ret0, _ := ret[0].(*models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByName indicates an expected call of GetCategoryByName.
func (mr *MockISearchRepositoryMockRecorder) GetCategoryByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByName", reflect.TypeOf((*MockISearchRepository)(nil).GetCategoryByName), arg0, arg1)
}

// GetProductsByName mocks base method.
func (m *MockISearchRepository) GetProductsByName(arg0 context.Context, arg1 string) ([]*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByName", arg0, arg1)
	ret0, _ := ret[0].([]*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByName indicates an expected call of GetProductsByName.
func (mr *MockISearchRepositoryMockRecorder) GetProductsByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByName", reflect.TypeOf((*MockISearchRepository)(nil).GetProductsByName), arg0, arg1)
}

// GetProductsByNameWithFilterAndSort mocks base method.
func (m *MockISearchRepository) GetProductsByNameWithFilterAndSort(ctx context.Context, name string, offset int, minPrice, maxPrice float64, minRating float32, sortOption models.SortOption) ([]*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByNameWithFilterAndSort", ctx, name, offset, minPrice, maxPrice, minRating, sortOption)
	ret0, _ := ret[0].([]*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByNameWithFilterAndSort indicates an expected call of GetProductsByNameWithFilterAndSort.
func (mr *MockISearchRepositoryMockRecorder) GetProductsByNameWithFilterAndSort(ctx, name, offset, minPrice, maxPrice, minRating, sortOption interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByNameWithFilterAndSort", reflect.TypeOf((*MockISearchRepository)(nil).GetProductsByNameWithFilterAndSort), ctx, name, offset, minPrice, maxPrice, minRating, sortOption)
}
