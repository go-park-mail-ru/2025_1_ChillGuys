// Code generated by MockGen. DO NOT EDIT.
// Source: admin.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2025_1_ChillGuys/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIAdminRepository is a mock of IAdminRepository interface.
type MockIAdminRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAdminRepositoryMockRecorder
}

// MockIAdminRepositoryMockRecorder is the mock recorder for MockIAdminRepository.
type MockIAdminRepositoryMockRecorder struct {
	mock *MockIAdminRepository
}

// NewMockIAdminRepository creates a new mock instance.
func NewMockIAdminRepository(ctrl *gomock.Controller) *MockIAdminRepository {
	mock := &MockIAdminRepository{ctrl: ctrl}
	mock.recorder = &MockIAdminRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAdminRepository) EXPECT() *MockIAdminRepositoryMockRecorder {
	return m.recorder
}

// GetPendingProducts mocks base method.
func (m *MockIAdminRepository) GetPendingProducts(ctx context.Context, offset int) ([]*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingProducts", ctx, offset)
	ret0, _ := ret[0].([]*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingProducts indicates an expected call of GetPendingProducts.
func (mr *MockIAdminRepositoryMockRecorder) GetPendingProducts(ctx, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingProducts", reflect.TypeOf((*MockIAdminRepository)(nil).GetPendingProducts), ctx, offset)
}

// GetPendingUsers mocks base method.
func (m *MockIAdminRepository) GetPendingUsers(ctx context.Context, offset int) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingUsers", ctx, offset)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingUsers indicates an expected call of GetPendingUsers.
func (mr *MockIAdminRepositoryMockRecorder) GetPendingUsers(ctx, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingUsers", reflect.TypeOf((*MockIAdminRepository)(nil).GetPendingUsers), ctx, offset)
}

// UpdateProductStatus mocks base method.
func (m *MockIAdminRepository) UpdateProductStatus(ctx context.Context, productID uuid.UUID, status models.ProductStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductStatus", ctx, productID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductStatus indicates an expected call of UpdateProductStatus.
func (mr *MockIAdminRepositoryMockRecorder) UpdateProductStatus(ctx, productID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductStatus", reflect.TypeOf((*MockIAdminRepository)(nil).UpdateProductStatus), ctx, productID, status)
}

// UpdateUserRole mocks base method.
func (m *MockIAdminRepository) UpdateUserRole(ctx context.Context, userID uuid.UUID, role models.UserRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRole", ctx, userID, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserRole indicates an expected call of UpdateUserRole.
func (mr *MockIAdminRepositoryMockRecorder) UpdateUserRole(ctx, userID, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRole", reflect.TypeOf((*MockIAdminRepository)(nil).UpdateUserRole), ctx, userID, role)
}
