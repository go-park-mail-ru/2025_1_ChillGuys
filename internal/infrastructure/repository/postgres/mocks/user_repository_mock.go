// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2025_1_ChillGuys/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositoryMockRecorder
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
	mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
	mock := &MockIUserRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
	return m.recorder
}

<<<<<<< HEAD
// GetUserByEmail mocks base method.
func (m *MockIUserRepository) GetUserByEmail(arg0 context.Context, arg1 string) (*models.UserDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(*models.UserDB)
=======
// CheckExistence mocks base method.
func (m *MockIUserRepository) CheckExistence(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistence", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExistence indicates an expected call of CheckExistence.
func (mr *MockIUserRepositoryMockRecorder) CheckExistence(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistence", reflect.TypeOf((*MockIUserRepository)(nil).CheckExistence), arg0, arg1)
}

// CheckVersion mocks base method.
func (m *MockIUserRepository) CheckVersion(arg0 context.Context, arg1 string, arg2 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckVersion indicates an expected call of CheckVersion.
func (mr *MockIUserRepositoryMockRecorder) CheckVersion(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckVersion", reflect.TypeOf((*MockIUserRepository)(nil).CheckVersion), arg0, arg1, arg2)
}

// Create mocks base method.
func (m *MockIUserRepository) Create(arg0 context.Context, arg1 dto.UserDB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIUserRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUserRepository)(nil).Create), arg0, arg1)
}

// GetByEmail mocks base method.
func (m *MockIUserRepository) GetByEmail(arg0 context.Context, arg1 string) (*dto.UserDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", arg0, arg1)
	ret0, _ := ret[0].(*dto.UserDB)
>>>>>>> 2d4fb8dd0279e5702a7028c53ba069a2f3bb35ab
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockIUserRepositoryMockRecorder) GetByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockIUserRepository)(nil).GetByEmail), arg0, arg1)
}

<<<<<<< HEAD
// GetUserByID mocks base method.
func (m *MockIUserRepository) GetUserByID(arg0 context.Context, arg1 uuid.UUID) (*models.UserDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(*models.UserDB)
=======
// GetByID mocks base method.
func (m *MockIUserRepository) GetByID(arg0 context.Context, arg1 uuid.UUID) (*dto.UserDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*dto.UserDB)
>>>>>>> 2d4fb8dd0279e5702a7028c53ba069a2f3bb35ab
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIUserRepositoryMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIUserRepository)(nil).GetByID), arg0, arg1)
}

<<<<<<< HEAD
// UpdateUserEmail mocks base method.
func (m *MockIUserRepository) UpdateUserEmail(arg0 context.Context, arg1 uuid.UUID, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserEmail", arg0, arg1, arg2)
=======
// GetCurrentVersion mocks base method.
func (m *MockIUserRepository) GetCurrentVersion(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentVersion", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentVersion indicates an expected call of GetCurrentVersion.
func (mr *MockIUserRepositoryMockRecorder) GetCurrentVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentVersion", reflect.TypeOf((*MockIUserRepository)(nil).GetCurrentVersion), arg0, arg1)
}

// IncrementVersion mocks base method.
func (m *MockIUserRepository) IncrementVersion(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementVersion", arg0, arg1)
>>>>>>> 2d4fb8dd0279e5702a7028c53ba069a2f3bb35ab
	ret0, _ := ret[0].(error)
	return ret0
}

<<<<<<< HEAD
// UpdateUserEmail indicates an expected call of UpdateUserEmail.
func (mr *MockIUserRepositoryMockRecorder) UpdateUserEmail(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserEmail", reflect.TypeOf((*MockIUserRepository)(nil).UpdateUserEmail), arg0, arg1, arg2)
=======
// IncrementVersion indicates an expected call of IncrementVersion.
func (mr *MockIUserRepositoryMockRecorder) IncrementVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementVersion", reflect.TypeOf((*MockIUserRepository)(nil).IncrementVersion), arg0, arg1)
>>>>>>> 2d4fb8dd0279e5702a7028c53ba069a2f3bb35ab
}

// UpdateImageURL mocks base method.
func (m *MockIUserRepository) UpdateImageURL(arg0 context.Context, arg1 uuid.UUID, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImageURL", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateImageURL indicates an expected call of UpdateImageURL.
func (mr *MockIUserRepositoryMockRecorder) UpdateImageURL(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImageURL", reflect.TypeOf((*MockIUserRepository)(nil).UpdateImageURL), arg0, arg1, arg2)
}

// UpdateUserPassword mocks base method.
func (m *MockIUserRepository) UpdateUserPassword(arg0 context.Context, arg1 uuid.UUID, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockIUserRepositoryMockRecorder) UpdateUserPassword(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockIUserRepository)(nil).UpdateUserPassword), arg0, arg1, arg2)
}

// UpdateUserProfile mocks base method.
func (m *MockIUserRepository) UpdateUserProfile(arg0 context.Context, arg1 uuid.UUID, arg2 models.UpdateUserDB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserProfile indicates an expected call of UpdateUserProfile.
func (mr *MockIUserRepositoryMockRecorder) UpdateUserProfile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfile", reflect.TypeOf((*MockIUserRepository)(nil).UpdateUserProfile), arg0, arg1, arg2)
}
