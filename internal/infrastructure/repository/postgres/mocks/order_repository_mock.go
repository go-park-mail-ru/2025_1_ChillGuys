// Code generated by MockGen. DO NOT EDIT.
// Source: order.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2025_1_ChillGuys/internal/models"
	dto "github.com/go-park-mail-ru/2025_1_ChillGuys/internal/transport/dto"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIOrderRepository is a mock of IOrderRepository interface.
type MockIOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIOrderRepositoryMockRecorder
}

// MockIOrderRepositoryMockRecorder is the mock recorder for MockIOrderRepository.
type MockIOrderRepositoryMockRecorder struct {
	mock *MockIOrderRepository
}

// NewMockIOrderRepository creates a new mock instance.
func NewMockIOrderRepository(ctrl *gomock.Controller) *MockIOrderRepository {
	mock := &MockIOrderRepository{ctrl: ctrl}
	mock.recorder = &MockIOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrderRepository) EXPECT() *MockIOrderRepositoryMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockIOrderRepository) CreateOrder(arg0 context.Context, arg1 dto.CreateOrderRepoReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockIOrderRepositoryMockRecorder) CreateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockIOrderRepository)(nil).CreateOrder), arg0, arg1)
}

// GetOrderAddress mocks base method.
func (m *MockIOrderRepository) GetOrderAddress(arg0 context.Context, arg1 uuid.UUID) (*models.AddressDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderAddress", arg0, arg1)
	ret0, _ := ret[0].(*models.AddressDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderAddress indicates an expected call of GetOrderAddress.
func (mr *MockIOrderRepositoryMockRecorder) GetOrderAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderAddress", reflect.TypeOf((*MockIOrderRepository)(nil).GetOrderAddress), arg0, arg1)
}

// GetOrderProducts mocks base method.
func (m *MockIOrderRepository) GetOrderProducts(arg0 context.Context, arg1 uuid.UUID) (*[]dto.GetOrderProductResDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderProducts", arg0, arg1)
	ret0, _ := ret[0].(*[]dto.GetOrderProductResDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderProducts indicates an expected call of GetOrderProducts.
func (mr *MockIOrderRepositoryMockRecorder) GetOrderProducts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderProducts", reflect.TypeOf((*MockIOrderRepository)(nil).GetOrderProducts), arg0, arg1)
}

// GetOrdersByUserID mocks base method.
func (m *MockIOrderRepository) GetOrdersByUserID(arg0 context.Context, arg1 uuid.UUID) (*[]dto.GetOrderByUserIDResDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUserID", arg0, arg1)
	ret0, _ := ret[0].(*[]dto.GetOrderByUserIDResDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByUserID indicates an expected call of GetOrdersByUserID.
func (mr *MockIOrderRepositoryMockRecorder) GetOrdersByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUserID", reflect.TypeOf((*MockIOrderRepository)(nil).GetOrdersByUserID), arg0, arg1)
}

// GetOrdersPlaced mocks base method.
func (m *MockIOrderRepository) GetOrdersPlaced(ctx context.Context) (*[]dto.GetOrderByUserIDResDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersPlaced", ctx)
	ret0, _ := ret[0].(*[]dto.GetOrderByUserIDResDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersPlaced indicates an expected call of GetOrdersPlaced.
func (mr *MockIOrderRepositoryMockRecorder) GetOrdersPlaced(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersPlaced", reflect.TypeOf((*MockIOrderRepository)(nil).GetOrdersPlaced), ctx)
}

// GetProductImage mocks base method.
func (m *MockIOrderRepository) GetProductImage(arg0 context.Context, arg1 uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductImage", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductImage indicates an expected call of GetProductImage.
func (mr *MockIOrderRepositoryMockRecorder) GetProductImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductImage", reflect.TypeOf((*MockIOrderRepository)(nil).GetProductImage), arg0, arg1)
}

// GetUserIDByOrderID mocks base method.
func (m *MockIOrderRepository) GetUserIDByOrderID(ctx context.Context, orderID uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDByOrderID", ctx, orderID)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDByOrderID indicates an expected call of GetUserIDByOrderID.
func (mr *MockIOrderRepositoryMockRecorder) GetUserIDByOrderID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDByOrderID", reflect.TypeOf((*MockIOrderRepository)(nil).GetUserIDByOrderID), ctx, orderID)
}

// ProductDiscounts mocks base method.
func (m *MockIOrderRepository) ProductDiscounts(arg0 context.Context, arg1 uuid.UUID) ([]models.ProductDiscount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductDiscounts", arg0, arg1)
	ret0, _ := ret[0].([]models.ProductDiscount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductDiscounts indicates an expected call of ProductDiscounts.
func (mr *MockIOrderRepositoryMockRecorder) ProductDiscounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductDiscounts", reflect.TypeOf((*MockIOrderRepository)(nil).ProductDiscounts), arg0, arg1)
}

// ProductPrice mocks base method.
func (m *MockIOrderRepository) ProductPrice(arg0 context.Context, arg1 uuid.UUID) (*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductPrice", arg0, arg1)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductPrice indicates an expected call of ProductPrice.
func (mr *MockIOrderRepositoryMockRecorder) ProductPrice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductPrice", reflect.TypeOf((*MockIOrderRepository)(nil).ProductPrice), arg0, arg1)
}

// UpdateProductQuantity mocks base method.
func (m *MockIOrderRepository) UpdateProductQuantity(arg0 context.Context, arg1 uuid.UUID, arg2 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductQuantity", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductQuantity indicates an expected call of UpdateProductQuantity.
func (mr *MockIOrderRepositoryMockRecorder) UpdateProductQuantity(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductQuantity", reflect.TypeOf((*MockIOrderRepository)(nil).UpdateProductQuantity), arg0, arg1, arg2)
}

// UpdateStatus mocks base method.
func (m *MockIOrderRepository) UpdateStatus(ctx context.Context, orderID uuid.UUID, status models.OrderStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, orderID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockIOrderRepositoryMockRecorder) UpdateStatus(ctx, orderID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockIOrderRepository)(nil).UpdateStatus), ctx, orderID, status)
}
