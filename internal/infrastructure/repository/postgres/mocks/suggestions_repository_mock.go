// Code generated by MockGen. DO NOT EDIT.
// Source: suggestions.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2025_1_ChillGuys/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockISuggestionsRepository is a mock of ISuggestionsRepository interface.
type MockISuggestionsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockISuggestionsRepositoryMockRecorder
}

// MockISuggestionsRepositoryMockRecorder is the mock recorder for MockISuggestionsRepository.
type MockISuggestionsRepositoryMockRecorder struct {
	mock *MockISuggestionsRepository
}

// NewMockISuggestionsRepository creates a new mock instance.
func NewMockISuggestionsRepository(ctrl *gomock.Controller) *MockISuggestionsRepository {
	mock := &MockISuggestionsRepository{ctrl: ctrl}
	mock.recorder = &MockISuggestionsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISuggestionsRepository) EXPECT() *MockISuggestionsRepositoryMockRecorder {
	return m.recorder
}

// GetAllCategoriesName mocks base method.
func (m *MockISuggestionsRepository) GetAllCategoriesName(ctx context.Context) ([]*models.CategorySuggestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCategoriesName", ctx)
	ret0, _ := ret[0].([]*models.CategorySuggestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCategoriesName indicates an expected call of GetAllCategoriesName.
func (mr *MockISuggestionsRepositoryMockRecorder) GetAllCategoriesName(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCategoriesName", reflect.TypeOf((*MockISuggestionsRepository)(nil).GetAllCategoriesName), ctx)
}

// GetAllProductsName mocks base method.
func (m *MockISuggestionsRepository) GetAllProductsName(ctx context.Context) ([]*models.ProductSuggestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProductsName", ctx)
	ret0, _ := ret[0].([]*models.ProductSuggestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProductsName indicates an expected call of GetAllProductsName.
func (mr *MockISuggestionsRepositoryMockRecorder) GetAllProductsName(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProductsName", reflect.TypeOf((*MockISuggestionsRepository)(nil).GetAllProductsName), ctx)
}

// GetAllProductsNameOffset mocks base method.
func (m *MockISuggestionsRepository) GetAllProductsNameOffset(ctx context.Context, offset int) ([]*models.ProductSuggestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProductsNameOffset", ctx, offset)
	ret0, _ := ret[0].([]*models.ProductSuggestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProductsNameOffset indicates an expected call of GetAllProductsNameOffset.
func (mr *MockISuggestionsRepositoryMockRecorder) GetAllProductsNameOffset(ctx, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProductsNameOffset", reflect.TypeOf((*MockISuggestionsRepository)(nil).GetAllProductsNameOffset), ctx, offset)
}

// GetProductsNameByCategory mocks base method.
func (m *MockISuggestionsRepository) GetProductsNameByCategory(ctx context.Context, categoryID string) ([]*models.ProductSuggestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsNameByCategory", ctx, categoryID)
	ret0, _ := ret[0].([]*models.ProductSuggestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsNameByCategory indicates an expected call of GetProductsNameByCategory.
func (mr *MockISuggestionsRepositoryMockRecorder) GetProductsNameByCategory(ctx, categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsNameByCategory", reflect.TypeOf((*MockISuggestionsRepository)(nil).GetProductsNameByCategory), ctx, categoryID)
}

// GetProductsNameByCategoryOffset mocks base method.
func (m *MockISuggestionsRepository) GetProductsNameByCategoryOffset(ctx context.Context, categoryID string, offset int) ([]*models.ProductSuggestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsNameByCategoryOffset", ctx, categoryID, offset)
	ret0, _ := ret[0].([]*models.ProductSuggestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsNameByCategoryOffset indicates an expected call of GetProductsNameByCategoryOffset.
func (mr *MockISuggestionsRepositoryMockRecorder) GetProductsNameByCategoryOffset(ctx, categoryID, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsNameByCategoryOffset", reflect.TypeOf((*MockISuggestionsRepository)(nil).GetProductsNameByCategoryOffset), ctx, categoryID, offset)
}
