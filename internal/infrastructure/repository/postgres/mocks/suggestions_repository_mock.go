// Code generated by MockGen. DO NOT EDIT.
// Source: suggestions.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2025_1_ChillGuys/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockISuggestionsRepository is a mock of ISuggestionsRepository interface.
type MockISuggestionsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockISuggestionsRepositoryMockRecorder
}

// MockISuggestionsRepositoryMockRecorder is the mock recorder for MockISuggestionsRepository.
type MockISuggestionsRepositoryMockRecorder struct {
	mock *MockISuggestionsRepository
}

// NewMockISuggestionsRepository creates a new mock instance.
func NewMockISuggestionsRepository(ctrl *gomock.Controller) *MockISuggestionsRepository {
	mock := &MockISuggestionsRepository{ctrl: ctrl}
	mock.recorder = &MockISuggestionsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISuggestionsRepository) EXPECT() *MockISuggestionsRepositoryMockRecorder {
	return m.recorder
}

// GetAllCategoriesName mocks base method.
func (m *MockISuggestionsRepository) GetAllCategoriesName(ctx context.Context) ([]*models.CategorySuggestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCategoriesName", ctx)
	ret0, _ := ret[0].([]*models.CategorySuggestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCategoriesName indicates an expected call of GetAllCategoriesName.
func (mr *MockISuggestionsRepositoryMockRecorder) GetAllCategoriesName(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCategoriesName", reflect.TypeOf((*MockISuggestionsRepository)(nil).GetAllCategoriesName), ctx)
}

// GetAllProductsName mocks base method.
func (m *MockISuggestionsRepository) GetAllProductsName(ctx context.Context) ([]*models.ProductSuggestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProductsName", ctx)
	ret0, _ := ret[0].([]*models.ProductSuggestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProductsName indicates an expected call of GetAllProductsName.
func (mr *MockISuggestionsRepositoryMockRecorder) GetAllProductsName(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProductsName", reflect.TypeOf((*MockISuggestionsRepository)(nil).GetAllProductsName), ctx)
}

// GetProductsNameByCategory mocks base method.
func (m *MockISuggestionsRepository) GetProductsNameByCategory(ctx context.Context, categoryID string) ([]*models.ProductSuggestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsNameByCategory", ctx, categoryID)
	ret0, _ := ret[0].([]*models.ProductSuggestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsNameByCategory indicates an expected call of GetProductsNameByCategory.
func (mr *MockISuggestionsRepositoryMockRecorder) GetProductsNameByCategory(ctx, categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsNameByCategory", reflect.TypeOf((*MockISuggestionsRepository)(nil).GetProductsNameByCategory), ctx, categoryID)
}

// MockISuggestionsRedisRepository is a mock of ISuggestionsRedisRepository interface.
type MockISuggestionsRedisRepository struct {
	ctrl     *gomock.Controller
	recorder *MockISuggestionsRedisRepositoryMockRecorder
}

// MockISuggestionsRedisRepositoryMockRecorder is the mock recorder for MockISuggestionsRedisRepository.
type MockISuggestionsRedisRepositoryMockRecorder struct {
	mock *MockISuggestionsRedisRepository
}

// NewMockISuggestionsRedisRepository creates a new mock instance.
func NewMockISuggestionsRedisRepository(ctrl *gomock.Controller) *MockISuggestionsRedisRepository {
	mock := &MockISuggestionsRedisRepository{ctrl: ctrl}
	mock.recorder = &MockISuggestionsRedisRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISuggestionsRedisRepository) EXPECT() *MockISuggestionsRedisRepositoryMockRecorder {
	return m.recorder
}

// AddProductSuggestionsByCategory mocks base method.
func (m *MockISuggestionsRedisRepository) AddProductSuggestionsByCategory(ctx context.Context, categoryID string, names []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProductSuggestionsByCategory", ctx, categoryID, names)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProductSuggestionsByCategory indicates an expected call of AddProductSuggestionsByCategory.
func (mr *MockISuggestionsRedisRepositoryMockRecorder) AddProductSuggestionsByCategory(ctx, categoryID, names interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProductSuggestionsByCategory", reflect.TypeOf((*MockISuggestionsRedisRepository)(nil).AddProductSuggestionsByCategory), ctx, categoryID, names)
}

// AddSuggestionsByKey mocks base method.
func (m *MockISuggestionsRedisRepository) AddSuggestionsByKey(ctx context.Context, key string, names []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSuggestionsByKey", ctx, key, names)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSuggestionsByKey indicates an expected call of AddSuggestionsByKey.
func (mr *MockISuggestionsRedisRepositoryMockRecorder) AddSuggestionsByKey(ctx, key, names interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSuggestionsByKey", reflect.TypeOf((*MockISuggestionsRedisRepository)(nil).AddSuggestionsByKey), ctx, key, names)
}

// GetProductSuggestionsByCategory mocks base method.
func (m *MockISuggestionsRedisRepository) GetProductSuggestionsByCategory(ctx context.Context, categoryID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductSuggestionsByCategory", ctx, categoryID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductSuggestionsByCategory indicates an expected call of GetProductSuggestionsByCategory.
func (mr *MockISuggestionsRedisRepositoryMockRecorder) GetProductSuggestionsByCategory(ctx, categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductSuggestionsByCategory", reflect.TypeOf((*MockISuggestionsRedisRepository)(nil).GetProductSuggestionsByCategory), ctx, categoryID)
}

// GetProductSuggestionsByCategoryPaginated mocks base method.
func (m *MockISuggestionsRedisRepository) GetProductSuggestionsByCategoryPaginated(ctx context.Context, categoryID string, pageNum, limit int) ([]string, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductSuggestionsByCategoryPaginated", ctx, categoryID, pageNum, limit)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProductSuggestionsByCategoryPaginated indicates an expected call of GetProductSuggestionsByCategoryPaginated.
func (mr *MockISuggestionsRedisRepositoryMockRecorder) GetProductSuggestionsByCategoryPaginated(ctx, categoryID, pageNum, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductSuggestionsByCategoryPaginated", reflect.TypeOf((*MockISuggestionsRedisRepository)(nil).GetProductSuggestionsByCategoryPaginated), ctx, categoryID, pageNum, limit)
}

// GetSuggestionsByKey mocks base method.
func (m *MockISuggestionsRedisRepository) GetSuggestionsByKey(ctx context.Context, key string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuggestionsByKey", ctx, key)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuggestionsByKey indicates an expected call of GetSuggestionsByKey.
func (mr *MockISuggestionsRedisRepositoryMockRecorder) GetSuggestionsByKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuggestionsByKey", reflect.TypeOf((*MockISuggestionsRedisRepository)(nil).GetSuggestionsByKey), ctx, key)
}
