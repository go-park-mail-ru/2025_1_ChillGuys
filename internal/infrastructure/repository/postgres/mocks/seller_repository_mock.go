// Code generated by MockGen. DO NOT EDIT.
// Source: seller.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2025_1_ChillGuys/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockISellerRepository is a mock of ISellerRepository interface.
type MockISellerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockISellerRepositoryMockRecorder
}

// MockISellerRepositoryMockRecorder is the mock recorder for MockISellerRepository.
type MockISellerRepositoryMockRecorder struct {
	mock *MockISellerRepository
}

// NewMockISellerRepository creates a new mock instance.
func NewMockISellerRepository(ctrl *gomock.Controller) *MockISellerRepository {
	mock := &MockISellerRepository{ctrl: ctrl}
	mock.recorder = &MockISellerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISellerRepository) EXPECT() *MockISellerRepositoryMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockISellerRepository) AddProduct(ctx context.Context, product *models.Product, categoryID uuid.UUID) (*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", ctx, product, categoryID)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockISellerRepositoryMockRecorder) AddProduct(ctx, product, categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockISellerRepository)(nil).AddProduct), ctx, product, categoryID)
}

// CheckProductBelongs mocks base method.
func (m *MockISellerRepository) CheckProductBelongs(ctx context.Context, productID, sellerID uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckProductBelongs", ctx, productID, sellerID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckProductBelongs indicates an expected call of CheckProductBelongs.
func (mr *MockISellerRepositoryMockRecorder) CheckProductBelongs(ctx, productID, sellerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckProductBelongs", reflect.TypeOf((*MockISellerRepository)(nil).CheckProductBelongs), ctx, productID, sellerID)
}

// GetSellerProducts mocks base method.
func (m *MockISellerRepository) GetSellerProducts(ctx context.Context, sellerID uuid.UUID, offset int) ([]*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSellerProducts", ctx, sellerID, offset)
	ret0, _ := ret[0].([]*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSellerProducts indicates an expected call of GetSellerProducts.
func (mr *MockISellerRepositoryMockRecorder) GetSellerProducts(ctx, sellerID, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSellerProducts", reflect.TypeOf((*MockISellerRepository)(nil).GetSellerProducts), ctx, sellerID, offset)
}

// UploadProductImage mocks base method.
func (m *MockISellerRepository) UploadProductImage(ctx context.Context, productID uuid.UUID, imageURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadProductImage", ctx, productID, imageURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadProductImage indicates an expected call of UploadProductImage.
func (mr *MockISellerRepositoryMockRecorder) UploadProductImage(ctx, productID, imageURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadProductImage", reflect.TypeOf((*MockISellerRepository)(nil).UploadProductImage), ctx, productID, imageURL)
}
