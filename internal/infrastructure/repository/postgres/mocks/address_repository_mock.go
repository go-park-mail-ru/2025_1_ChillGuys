// Code generated by MockGen. DO NOT EDIT.
// Source: address.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2025_1_ChillGuys/internal/models"
	dto "github.com/go-park-mail-ru/2025_1_ChillGuys/internal/transport/dto"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIAddressRepository is a mock of IAddressRepository interface.
type MockIAddressRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAddressRepositoryMockRecorder
}

// MockIAddressRepositoryMockRecorder is the mock recorder for MockIAddressRepository.
type MockIAddressRepositoryMockRecorder struct {
	mock *MockIAddressRepository
}

// NewMockIAddressRepository creates a new mock instance.
func NewMockIAddressRepository(ctrl *gomock.Controller) *MockIAddressRepository {
	mock := &MockIAddressRepository{ctrl: ctrl}
	mock.recorder = &MockIAddressRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAddressRepository) EXPECT() *MockIAddressRepositoryMockRecorder {
	return m.recorder
}

// CheckAddressExists mocks base method.
func (m *MockIAddressRepository) CheckAddressExists(arg0 context.Context, arg1 models.AddressDB) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAddressExists", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAddressExists indicates an expected call of CheckAddressExists.
func (mr *MockIAddressRepositoryMockRecorder) CheckAddressExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAddressExists", reflect.TypeOf((*MockIAddressRepository)(nil).CheckAddressExists), arg0, arg1)
}

// CreateAddress mocks base method.
func (m *MockIAddressRepository) CreateAddress(arg0 context.Context, arg1 models.AddressDB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAddress", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAddress indicates an expected call of CreateAddress.
func (mr *MockIAddressRepositoryMockRecorder) CreateAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAddress", reflect.TypeOf((*MockIAddressRepository)(nil).CreateAddress), arg0, arg1)
}

// CreateUserAddress mocks base method.
func (m *MockIAddressRepository) CreateUserAddress(arg0 context.Context, arg1 models.UserAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserAddress", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserAddress indicates an expected call of CreateUserAddress.
func (mr *MockIAddressRepositoryMockRecorder) CreateUserAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserAddress", reflect.TypeOf((*MockIAddressRepository)(nil).CreateUserAddress), arg0, arg1)
}

// GetAllPickupPoints mocks base method.
func (m *MockIAddressRepository) GetAllPickupPoints(ctx context.Context) (*[]models.AddressDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPickupPoints", ctx)
	ret0, _ := ret[0].(*[]models.AddressDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPickupPoints indicates an expected call of GetAllPickupPoints.
func (mr *MockIAddressRepositoryMockRecorder) GetAllPickupPoints(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPickupPoints", reflect.TypeOf((*MockIAddressRepository)(nil).GetAllPickupPoints), ctx)
}

// GetUserAddress mocks base method.
func (m *MockIAddressRepository) GetUserAddress(arg0 context.Context, arg1 uuid.UUID) (*[]dto.AddressDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAddress", arg0, arg1)
	ret0, _ := ret[0].(*[]dto.AddressDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAddress indicates an expected call of GetUserAddress.
func (mr *MockIAddressRepositoryMockRecorder) GetUserAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAddress", reflect.TypeOf((*MockIAddressRepository)(nil).GetUserAddress), arg0, arg1)
}
