// Code generated by MockGen. DO NOT EDIT.
// Source: recommendation.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIRecommendationRepository is a mock of IRecommendationRepository interface.
type MockIRecommendationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRecommendationRepositoryMockRecorder
}

// MockIRecommendationRepositoryMockRecorder is the mock recorder for MockIRecommendationRepository.
type MockIRecommendationRepositoryMockRecorder struct {
	mock *MockIRecommendationRepository
}

// NewMockIRecommendationRepository creates a new mock instance.
func NewMockIRecommendationRepository(ctrl *gomock.Controller) *MockIRecommendationRepository {
	mock := &MockIRecommendationRepository{ctrl: ctrl}
	mock.recorder = &MockIRecommendationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRecommendationRepository) EXPECT() *MockIRecommendationRepositoryMockRecorder {
	return m.recorder
}

// GetCategoryIDsByProductID mocks base method.
func (m *MockIRecommendationRepository) GetCategoryIDsByProductID(arg0 context.Context, arg1 uuid.UUID) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryIDsByProductID", arg0, arg1)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryIDsByProductID indicates an expected call of GetCategoryIDsByProductID.
func (mr *MockIRecommendationRepositoryMockRecorder) GetCategoryIDsByProductID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryIDsByProductID", reflect.TypeOf((*MockIRecommendationRepository)(nil).GetCategoryIDsByProductID), arg0, arg1)
}

// GetProductIDsBySubcategoryID mocks base method.
func (m *MockIRecommendationRepository) GetProductIDsBySubcategoryID(ctx context.Context, subcategoryID uuid.UUID, count int) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductIDsBySubcategoryID", ctx, subcategoryID, count)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductIDsBySubcategoryID indicates an expected call of GetProductIDsBySubcategoryID.
func (mr *MockIRecommendationRepositoryMockRecorder) GetProductIDsBySubcategoryID(ctx, subcategoryID, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductIDsBySubcategoryID", reflect.TypeOf((*MockIRecommendationRepository)(nil).GetProductIDsBySubcategoryID), ctx, subcategoryID, count)
}
