// Code generated by MockGen. DO NOT EDIT.
// Source: basket.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2025_1_ChillGuys/internal/models"
	dto "github.com/go-park-mail-ru/2025_1_ChillGuys/internal/transport/dto"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIBasketUsecase is a mock of IBasketUsecase interface.
type MockIBasketUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIBasketUsecaseMockRecorder
}

// MockIBasketUsecaseMockRecorder is the mock recorder for MockIBasketUsecase.
type MockIBasketUsecaseMockRecorder struct {
	mock *MockIBasketUsecase
}

// NewMockIBasketUsecase creates a new mock instance.
func NewMockIBasketUsecase(ctrl *gomock.Controller) *MockIBasketUsecase {
	mock := &MockIBasketUsecase{ctrl: ctrl}
	mock.recorder = &MockIBasketUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBasketUsecase) EXPECT() *MockIBasketUsecaseMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockIBasketUsecase) AddProduct(ctx context.Context, productID uuid.UUID) (*models.BasketItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", ctx, productID)
	ret0, _ := ret[0].(*models.BasketItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockIBasketUsecaseMockRecorder) AddProduct(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockIBasketUsecase)(nil).AddProduct), ctx, productID)
}

// Clear mocks base method.
func (m *MockIBasketUsecase) Clear(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockIBasketUsecaseMockRecorder) Clear(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockIBasketUsecase)(nil).Clear), ctx)
}

// DeleteProduct mocks base method.
func (m *MockIBasketUsecase) DeleteProduct(ctx context.Context, productID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", ctx, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockIBasketUsecaseMockRecorder) DeleteProduct(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockIBasketUsecase)(nil).DeleteProduct), ctx, productID)
}

// Get mocks base method.
func (m *MockIBasketUsecase) Get(ctx context.Context) (*dto.BasketResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].(*dto.BasketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIBasketUsecaseMockRecorder) Get(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIBasketUsecase)(nil).Get), ctx)
}

// UpdateProductQuantity mocks base method.
func (m *MockIBasketUsecase) UpdateProductQuantity(ctx context.Context, productID uuid.UUID, quantity int) (*models.BasketItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductQuantity", ctx, productID, quantity)
	ret0, _ := ret[0].(*models.BasketItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductQuantity indicates an expected call of UpdateProductQuantity.
func (mr *MockIBasketUsecaseMockRecorder) UpdateProductQuantity(ctx, productID, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductQuantity", reflect.TypeOf((*MockIBasketUsecase)(nil).UpdateProductQuantity), ctx, productID, quantity)
}
