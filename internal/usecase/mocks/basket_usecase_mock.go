// Code generated by MockGen. DO NOT EDIT.
// Source: basket.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2025_1_ChillGuys/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIBasketUsecase is a mock of IBasketUsecase interface.
type MockIBasketUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIBasketUsecaseMockRecorder
}

// MockIBasketUsecaseMockRecorder is the mock recorder for MockIBasketUsecase.
type MockIBasketUsecaseMockRecorder struct {
	mock *MockIBasketUsecase
}

// NewMockIBasketUsecase creates a new mock instance.
func NewMockIBasketUsecase(ctrl *gomock.Controller) *MockIBasketUsecase {
	mock := &MockIBasketUsecase{ctrl: ctrl}
	mock.recorder = &MockIBasketUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBasketUsecase) EXPECT() *MockIBasketUsecaseMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockIBasketUsecase) Add(ctx context.Context, productID uuid.UUID) (*models.BasketItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, productID)
	ret0, _ := ret[0].(*models.BasketItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockIBasketUsecaseMockRecorder) Add(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIBasketUsecase)(nil).Add), ctx, productID)
}

// Clear mocks base method.
func (m *MockIBasketUsecase) Clear(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockIBasketUsecaseMockRecorder) Clear(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockIBasketUsecase)(nil).Clear), ctx)
}

// Delete mocks base method.
func (m *MockIBasketUsecase) Delete(ctx context.Context, productID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIBasketUsecaseMockRecorder) Delete(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIBasketUsecase)(nil).Delete), ctx, productID)
}

// Get mocks base method.
func (m *MockIBasketUsecase) Get(ctx context.Context) ([]*models.BasketItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].([]*models.BasketItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIBasketUsecaseMockRecorder) Get(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIBasketUsecase)(nil).Get), ctx)
}

// UpdateQuantity mocks base method.
func (m *MockIBasketUsecase) UpdateQuantity(ctx context.Context, productID uuid.UUID, quantity int) (*models.BasketItem, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuantity", ctx, productID, quantity)
	ret0, _ := ret[0].(*models.BasketItem)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateQuantity indicates an expected call of UpdateQuantity.
func (mr *MockIBasketUsecaseMockRecorder) UpdateQuantity(ctx, productID, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuantity", reflect.TypeOf((*MockIBasketUsecase)(nil).UpdateQuantity), ctx, productID, quantity)
}
