// Code generated by MockGen. DO NOT EDIT.
// Source: admin.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/go-park-mail-ru/2025_1_ChillGuys/internal/transport/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockIAdminUsecase is a mock of IAdminUsecase interface.
type MockIAdminUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIAdminUsecaseMockRecorder
}

// MockIAdminUsecaseMockRecorder is the mock recorder for MockIAdminUsecase.
type MockIAdminUsecaseMockRecorder struct {
	mock *MockIAdminUsecase
}

// NewMockIAdminUsecase creates a new mock instance.
func NewMockIAdminUsecase(ctrl *gomock.Controller) *MockIAdminUsecase {
	mock := &MockIAdminUsecase{ctrl: ctrl}
	mock.recorder = &MockIAdminUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAdminUsecase) EXPECT() *MockIAdminUsecaseMockRecorder {
	return m.recorder
}

// GetPendingProducts mocks base method.
func (m *MockIAdminUsecase) GetPendingProducts(ctx context.Context, offset int) (dto.ProductsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingProducts", ctx, offset)
	ret0, _ := ret[0].(dto.ProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingProducts indicates an expected call of GetPendingProducts.
func (mr *MockIAdminUsecaseMockRecorder) GetPendingProducts(ctx, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingProducts", reflect.TypeOf((*MockIAdminUsecase)(nil).GetPendingProducts), ctx, offset)
}

// GetPendingUsers mocks base method.
func (m *MockIAdminUsecase) GetPendingUsers(ctx context.Context, offset int) (dto.UsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingUsers", ctx, offset)
	ret0, _ := ret[0].(dto.UsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingUsers indicates an expected call of GetPendingUsers.
func (mr *MockIAdminUsecaseMockRecorder) GetPendingUsers(ctx, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingUsers", reflect.TypeOf((*MockIAdminUsecase)(nil).GetPendingUsers), ctx, offset)
}

// UpdateProductStatus mocks base method.
func (m *MockIAdminUsecase) UpdateProductStatus(ctx context.Context, req dto.UpdateProductStatusRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductStatus", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductStatus indicates an expected call of UpdateProductStatus.
func (mr *MockIAdminUsecaseMockRecorder) UpdateProductStatus(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductStatus", reflect.TypeOf((*MockIAdminUsecase)(nil).UpdateProductStatus), ctx, req)
}

// UpdateUserRole mocks base method.
func (m *MockIAdminUsecase) UpdateUserRole(ctx context.Context, req dto.UpdateUserRoleRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRole", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserRole indicates an expected call of UpdateUserRole.
func (mr *MockIAdminUsecaseMockRecorder) UpdateUserRole(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRole", reflect.TypeOf((*MockIAdminUsecase)(nil).UpdateUserRole), ctx, req)
}
