// Code generated by MockGen. DO NOT EDIT.
// Source: recommendation.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2025_1_ChillGuys/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIRecommendationUsecase is a mock of IRecommendationUsecase interface.
type MockIRecommendationUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIRecommendationUsecaseMockRecorder
}

// MockIRecommendationUsecaseMockRecorder is the mock recorder for MockIRecommendationUsecase.
type MockIRecommendationUsecaseMockRecorder struct {
	mock *MockIRecommendationUsecase
}

// NewMockIRecommendationUsecase creates a new mock instance.
func NewMockIRecommendationUsecase(ctrl *gomock.Controller) *MockIRecommendationUsecase {
	mock := &MockIRecommendationUsecase{ctrl: ctrl}
	mock.recorder = &MockIRecommendationUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRecommendationUsecase) EXPECT() *MockIRecommendationUsecaseMockRecorder {
	return m.recorder
}

// GetRecommendations mocks base method.
func (m *MockIRecommendationUsecase) GetRecommendations(ctx context.Context, productID uuid.UUID) ([]*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommendations", ctx, productID)
	ret0, _ := ret[0].([]*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommendations indicates an expected call of GetRecommendations.
func (mr *MockIRecommendationUsecaseMockRecorder) GetRecommendations(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendations", reflect.TypeOf((*MockIRecommendationUsecase)(nil).GetRecommendations), ctx, productID)
}
