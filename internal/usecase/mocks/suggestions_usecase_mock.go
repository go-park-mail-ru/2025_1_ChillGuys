// Code generated by MockGen. DO NOT EDIT.
// Source: suggestions.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/go-park-mail-ru/2025_1_ChillGuys/internal/transport/dto"
	gomock "github.com/golang/mock/gomock"
	null "github.com/guregu/null"
)

// MockISuggestionsUsecase is a mock of ISuggestionsUsecase interface.
type MockISuggestionsUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockISuggestionsUsecaseMockRecorder
}

// MockISuggestionsUsecaseMockRecorder is the mock recorder for MockISuggestionsUsecase.
type MockISuggestionsUsecaseMockRecorder struct {
	mock *MockISuggestionsUsecase
}

// NewMockISuggestionsUsecase creates a new mock instance.
func NewMockISuggestionsUsecase(ctrl *gomock.Controller) *MockISuggestionsUsecase {
	mock := &MockISuggestionsUsecase{ctrl: ctrl}
	mock.recorder = &MockISuggestionsUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISuggestionsUsecase) EXPECT() *MockISuggestionsUsecaseMockRecorder {
	return m.recorder
}

// GetCategorySuggestions mocks base method.
func (m *MockISuggestionsUsecase) GetCategorySuggestions(arg0 context.Context, arg1 string) (dto.CategoryNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategorySuggestions", arg0, arg1)
	ret0, _ := ret[0].(dto.CategoryNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategorySuggestions indicates an expected call of GetCategorySuggestions.
func (mr *MockISuggestionsUsecaseMockRecorder) GetCategorySuggestions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategorySuggestions", reflect.TypeOf((*MockISuggestionsUsecase)(nil).GetCategorySuggestions), arg0, arg1)
}

// GetProductSuggestions mocks base method.
func (m *MockISuggestionsUsecase) GetProductSuggestions(arg0 context.Context, arg1 null.String, arg2 string) (dto.ProductNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductSuggestions", arg0, arg1, arg2)
	ret0, _ := ret[0].(dto.ProductNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductSuggestions indicates an expected call of GetProductSuggestions.
func (mr *MockISuggestionsUsecaseMockRecorder) GetProductSuggestions(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductSuggestions", reflect.TypeOf((*MockISuggestionsUsecase)(nil).GetProductSuggestions), arg0, arg1, arg2)
}

// GetProductSuggestionsOffset mocks base method.
func (m *MockISuggestionsUsecase) GetProductSuggestionsOffset(arg0 context.Context, arg1 null.String, arg2 string, arg3 int) (dto.ProductNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductSuggestionsOffset", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(dto.ProductNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductSuggestionsOffset indicates an expected call of GetProductSuggestionsOffset.
func (mr *MockISuggestionsUsecaseMockRecorder) GetProductSuggestionsOffset(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductSuggestionsOffset", reflect.TypeOf((*MockISuggestionsUsecase)(nil).GetProductSuggestionsOffset), arg0, arg1, arg2, arg3)
}
