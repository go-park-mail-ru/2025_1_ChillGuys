// Code generated by MockGen. DO NOT EDIT.
// Source: product.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2025_1_ChillGuys/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIProductUsecase is a mock of IProductUsecase interface.
type MockIProductUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIProductUsecaseMockRecorder
}

// MockIProductUsecaseMockRecorder is the mock recorder for MockIProductUsecase.
type MockIProductUsecaseMockRecorder struct {
	mock *MockIProductUsecase
}

// NewMockIProductUsecase creates a new mock instance.
func NewMockIProductUsecase(ctrl *gomock.Controller) *MockIProductUsecase {
	mock := &MockIProductUsecase{ctrl: ctrl}
	mock.recorder = &MockIProductUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProductUsecase) EXPECT() *MockIProductUsecaseMockRecorder {
	return m.recorder
}

// GetAllCategories mocks base method.
func (m *MockIProductUsecase) GetAllCategories(ctx context.Context) ([]*models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCategories", ctx)
	ret0, _ := ret[0].([]*models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCategories indicates an expected call of GetAllCategories.
func (mr *MockIProductUsecaseMockRecorder) GetAllCategories(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCategories", reflect.TypeOf((*MockIProductUsecase)(nil).GetAllCategories), ctx)
}

// GetAllProducts mocks base method.
func (m *MockIProductUsecase) GetAllProducts(ctx context.Context) ([]*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProducts", ctx)
	ret0, _ := ret[0].([]*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProducts indicates an expected call of GetAllProducts.
func (mr *MockIProductUsecaseMockRecorder) GetAllProducts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProducts", reflect.TypeOf((*MockIProductUsecase)(nil).GetAllProducts), ctx)
}

// GetProductByID mocks base method.
func (m *MockIProductUsecase) GetProductByID(ctx context.Context, id uuid.UUID) (*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", ctx, id)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockIProductUsecaseMockRecorder) GetProductByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockIProductUsecase)(nil).GetProductByID), ctx, id)
}

// GetProductCover mocks base method.
func (m *MockIProductUsecase) GetProductCover(ctx context.Context, id uuid.UUID) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductCover", ctx, id)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductCover indicates an expected call of GetProductCover.
func (mr *MockIProductUsecaseMockRecorder) GetProductCover(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductCover", reflect.TypeOf((*MockIProductUsecase)(nil).GetProductCover), ctx, id)
}

// GetProductsByCategory mocks base method.
func (m *MockIProductUsecase) GetProductsByCategory(ctx context.Context, id uuid.UUID) ([]*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByCategory", ctx, id)
	ret0, _ := ret[0].([]*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByCategory indicates an expected call of GetProductsByCategory.
func (mr *MockIProductUsecaseMockRecorder) GetProductsByCategory(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByCategory", reflect.TypeOf((*MockIProductUsecase)(nil).GetProductsByCategory), ctx, id)
}
