basePath: /api
definitions:
  basket.addProductRequest:
    properties:
      product_id:
        type: string
    type: object
  basket.delProductRequest:
    properties:
      product_id:
        type: string
    type: object
  basket.updateQuantityRequest:
    properties:
      product_id:
        type: string
      quantity:
        type: integer
    type: object
  models.BasketItem:
    properties:
      basket_id:
        type: string
      id:
        type: string
      price_discount:
        type: number
      product_id:
        type: string
      product_image:
        type: string
      product_name:
        type: string
      product_price:
        type: number
      quantity:
        type: integer
      updated_at:
        type: string
    type: object
  models.BasketResponse:
    properties:
      products:
        items:
          $ref: '#/definitions/models.BasketItem'
        type: array
      total:
        type: integer
      total_price:
        type: number
      total_price_discount:
        type: number
    type: object
  models.Category:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  models.CategoryResponse:
    properties:
      categories:
        items:
          $ref: '#/definitions/models.Category'
        type: array
      total:
        type: integer
    type: object
  models.Product:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
      preview_image_url:
        type: string
      price:
        type: number
      quantity:
        type: integer
      rating:
        type: integer
      reviews_count:
        description: Добавлено поле
        type: integer
      seller_id:
        type: string
      status:
        type: string
      updated_at:
        type: string
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: string
      imageURL:
        type: string
      name:
        type: string
      phoneNumber:
        type: string
      surname:
        type: string
    type: object
  models.UserLoginRequestDTO:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.UserRegisterRequestDTO:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      surname:
        type: string
    type: object
  response.ErrorResponse:
    properties:
      message:
        type: string
    type: object
host: 90.156.217.63:8081
info:
  contact: {}
  description: API for ChillGuys marketplace
  title: ChillGuys API
  version: "1.0"
paths:
  /api/v1/products/category/{id}:
    get:
      description: Возвращает список всех одобренных товаров, принадлежащих указанной
        категории.
      parameters:
      - description: UUID категории в формате строки
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Успешный запрос. Возвращает массив товаров.
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
        "400":
          description: Неверный формат UUID категории
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Категория не найдена
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Получить товары по категории
      tags:
      - products
  /auth/login:
    post:
      consumes:
      - application/json
      description: Авторизация пользователя
      parameters:
      - description: User credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserLoginRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: No Content
          headers:
            Set-Cookie:
              description: Устанавливает JWT-токен в куки
              type: string
          schema:
            type: ""
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Неверные email или пароль
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Login user
      tags:
      - auth
  /auth/logout:
    post:
      description: Выход пользователя
      responses:
        "200":
          description: No Content
          schema:
            type: ""
        "401":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - TokenAuth: []
      summary: Logout user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Создает нового пользователя, хеширует пароль и устанавливает JWT-токен
        в куки
      parameters:
      - description: Данные для регистрации
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.UserRegisterRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: No Content
          headers:
            Set-Cookie:
              description: Устанавливает JWT-токен в куки
              type: string
          schema:
            type: ""
        "400":
          description: Некорректный запрос
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Пользователь уже существует
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Register user
      tags:
      - auth
  /basket:
    get:
      description: Возвращает все товары в корзине пользователя
      produces:
      - application/json
      responses:
        "200":
          description: Содержимое корзины
          schema:
            $ref: '#/definitions/models.BasketResponse'
        "401":
          description: Пользователь не авторизован
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Корзина не найдена
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Получить содержимое корзины
      tags:
      - basket
  /basket/add:
    post:
      consumes:
      - application/json
      description: Добавляет товар в корзину пользователя или увеличивает количество,
        если товар уже есть
      parameters:
      - description: Данные товара
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/basket.addProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Добавленный товар
          schema:
            $ref: '#/definitions/models.BasketItem'
        "400":
          description: Некорректные данные
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Пользователь не авторизован
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Товар не найден
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Добавить товар в корзину
      tags:
      - basket
  /basket/clear:
    delete:
      description: Полностью удаляет все товары из корзины пользователя
      responses:
        "204":
          description: Корзина успешно очищена
        "401":
          description: Пользователь не авторизован
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Очистить корзину
      tags:
      - basket
  /basket/remove:
    delete:
      parameters:
      - description: Данные товара
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/basket.delProductRequest'
      responses:
        "204":
          description: Товар успешно удалён
        "400":
          description: Некорректный формат запроса
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Пользователь не авторизован
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Товар не найден в корзине
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Удалить товар из корзины
      tags:
      - basket
  /basket/update:
    put:
      consumes:
      - application/json
      description: Изменяет количество указанного товара в корзине
      parameters:
      - description: Данные для обновления
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/basket.updateQuantityRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Обновленный товар
          schema:
            $ref: '#/definitions/models.BasketItem'
        "400":
          description: Некорректные данные
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Пользователь не авторизован
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Товар не найден
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Обновить количество товара
      tags:
      - basket
  /categories:
    get:
      description: Возвращает список всех доступных категорий товаров
      produces:
      - application/json
      responses:
        "200":
          description: Список категорий
          schema:
            $ref: '#/definitions/models.CategoryResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Получить все категории
      tags:
      - categories
  /files/{objectID}:
    get:
      description: Возвращает URL для доступа к файлу в MinIO
      parameters:
      - description: ID объекта в MinIO
        in: path
        name: objectID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Ссылка на файл
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Неверный ID объекта
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Файл не найден
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Получить файл по ID
      tags:
      - files
  /products/:
    get:
      description: Возвращает список всех продуктов
      produces:
      - application/json
      responses:
        "200":
          description: Список продуктов
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Получить все продукты
      tags:
      - products
  /products/{id}:
    get:
      description: Возвращает продукт по его ID
      parameters:
      - description: ID продукта
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Информация о продукте
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Некорректный ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Продукт не найден
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Получить продукт по ID
      tags:
      - products
  /products/{id}/cover:
    get:
      description: Возвращает обложку продукта по его ID
      parameters:
      - description: ID продукта
        in: path
        name: id
        required: true
        type: integer
      produces:
      - image/jpeg
      responses:
        "200":
          description: Обложка продукта
          schema:
            type: file
        "400":
          description: Некорректный ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Обложка не найдена
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Получить обложку продукта
      tags:
      - products
  /products/upload:
    post:
      consumes:
      - multipart/form-data
      description: Загружает один файл в хранилище MinIO
      parameters:
      - description: Файл для загрузки
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Информация о загруженном файле
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Ошибка в запросе
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Загрузить файл в MinIO
      tags:
      - products
  /users/avatar:
    post:
      consumes:
      - multipart/form-data
      description: Загружает аватар пользователя
      parameters:
      - description: Файл изображения
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: URL загруженного аватара
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Ошибка при обработке формы
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка загрузки файла
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - TokenAuth: []
      summary: Upload avatar
      tags:
      - users
  /users/me:
    get:
      description: Получение информации о текущем пользователе
      produces:
      - application/json
      responses:
        "200":
          description: Информация о пользователе
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Некорректный запрос
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - TokenAuth: []
      summary: Get user info
      tags:
      - users
securityDefinitions:
  BasicAuth:
    type: basic
  TokenAuth:
    in: cookie
    name: token
    type: apiKey
swagger: "2.0"
