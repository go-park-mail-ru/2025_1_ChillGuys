version: '3.8'

services:
  nginx:
    image: nginx:latest
    container_name: bazaar_nginx
    ports:
      - "8080:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - bazaar-app
      - minio
    networks:
      - bazaar-network

  bazaar-app:
    build:
      context: .
      dockerfile: Dockerfile
    image: niknike/bazaar
    container_name: bazaar_app
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: 5432
      JWT_SIGNATURE: ${JWT_SIGNATURE}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
      AUTH_REDIS_HOST: ${AUTH_REDIS_HOST}
      AUTH_REDIS_PORT: ${AUTH_REDIS_PORT}
      AUTH_REDIS_PASSWORD: ${AUTH_REDIS_PASSWORD}
      AUTH_REDIS_DB: ${AUTH_REDIS_DB:-0}
      SEARCH_REDIS_HOST: ${SEARCH_REDIS_HOST}
      SEARCH_REDIS_PORT: ${SEARCH_REDIS_PORT}
      SEARCH_REDIS_PASSWORD: ${SEARCH_REDIS_PASSWORD}
      SEARCH_REDIS_DB: ${SEARCH_REDIS_DB:-1}
      WAIT_FOR_MINIO: "true"
    ports:
      - "${SERVER_PORT}:8081"
    volumes:
      - ./.env:/app/.env
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      auth_redis:
        condition: service_healthy
      search_redis:
        condition: service_healthy
    networks:
      - bazaar-network
    command: sh -c "while ! nc -z minio 9000; do sleep 2; done && while ! nc -z auth_redis 6380; do sleep 2; done && while ! nc -z search_redis 6381; do sleep 2; done && ./migrate && ./main"
    deploy:
      replicas: ${APP_REPLICAS:-1}

  db:
    image: postgres:latest
    container_name: bazaar_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - bazaar-network

  minio:
    container_name: minio
    image: 'minio/minio:latest'
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - bazaar-network

  auth_redis:
    image: redis:alpine
    command: redis-server --bind 0.0.0.0 --port 6380 --requirepass ${AUTH_REDIS_PASSWORD}
    ports:
      - "${AUTH_REDIS_PORT}:6380"
    volumes:
      - auth_redis_data:/data
    environment:
      REDIS_PASSWORD: ${AUTH_REDIS_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -h localhost -p 6380 -a ${AUTH_REDIS_PASSWORD} ping | grep PONG"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - bazaar-network

  search_redis:
    image: redis:alpine
    command: redis-server --bind 0.0.0.0 --port 6381 --requirepass ${SEARCH_REDIS_PASSWORD}
    ports:
      - "${SEARCH_REDIS_PORT}:6381"
    volumes:
      - search_redis_data:/data
    environment:
      REDIS_PASSWORD: ${SEARCH_REDIS_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli -h localhost -p 6381 -a ${SEARCH_REDIS_PASSWORD} ping | grep PONG" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - bazaar-network

  createbuckets:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    network_mode: service:minio
    environment:
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
      MINIO_USE_SSL: "${MINIO_USE_SSL}"
      MINIO_DEFAULT_BUCKETS: "${MINIO_BUCKET_NAME}"
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc alias set bazaar-minio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb bazaar-minio/${MINIO_BUCKET_NAME};
      /usr/bin/mc anonymous set download bazaar-minio/${MINIO_BUCKET_NAME};
      exit 0;
      "
  
  user-service:
    build:
      context: .
      dockerfile: deployments/user/Dockerfile
    image: niknike/user-service
    container_name: user_service
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      JWT_SIGNATURE: ${JWT_SIGNATURE}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
      WAIT_FOR_MINIO: "true"
      GRPC_PORT: 50052
    ports:
      - "50052:50052"
    volumes:
      - ./.env:/app/.env
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - bazaar-network

  auth-service:
    build:
      context: .
      dockerfile: deployments/auth/Dockerfile
    image: niknike/auth-service
    container_name: auth_service
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      JWT_SIGNATURE: ${JWT_SIGNATURE}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
      REDIS_HOST: ${AUTH_REDIS_HOST}
      REDIS_PORT: ${AUTH_REDIS_PORT}
      REDIS_PASSWORD: ${AUTH_REDIS_PASSWORD}
      REDIS_DB: ${AUTH_REDIS_DB:-0}
      WAIT_FOR_MINIO: "true"
      GRPC_PORT: 50051
    ports:
      - "50051:50051"
    volumes:
      - ./.env:/app/.env
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      bazaar-network:
        aliases:
          - auth-service
  
  csat-service:
    build:
      context: .
      dockerfile: deployments/csat/Dockerfile
    image: niknike/csat-service
    container_name: csat_service
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      JWT_SIGNATURE: ${JWT_SIGNATURE}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
      REDIS_HOST: ${AUTH_REDIS_HOST}
      REDIS_PORT: ${AUTH_REDIS_PORT}
      REDIS_PASSWORD: ${AUTH_REDIS_PASSWORD}
      REDIS_DB: ${AUTH_REDIS_DB:-0}
      WAIT_FOR_MINIO: "true"
      GRPC_PORT: 50053
    ports:
      - "50053:50053"
    volumes:
      - ./.env:/app/.env
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      bazaar-network:
        aliases:
          - csat-service
  
  review-service:
    build:
      context: .
      dockerfile: deployments/review/Dockerfile
    image: niknike/review-service
    container_name: review_service
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      JWT_SIGNATURE: ${JWT_SIGNATURE}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
      WAIT_FOR_MINIO: "true"
      GRPC_PORT: 50054
    ports:
      - "50054:50054"
    volumes:
      - ./.env:/app/.env
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - bazaar-network

  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - bazaar-network

  # grafana:
  #    image: grafana/grafana:latest
  #    container_name: grafana
  #    links:
  #      - prometheus:prometheus # datasource = http://prometheus:9090
  #    environment:
  #      GF_SECURITY_ADMIN_USER: ${GF_ADMIN_USER}
  #      GF_SECURITY_ADMIN_PASSWORD: ${GF_ADMIN_PASSWORD}
  #    ports:
  #      - "3000:3000"
  #    depends_on:
  #      - prometheus
  #    networks:
  #      - bazaar-network
  #    volumes:
  #      - "./grafana/datasources:/etc/grafana/provisioning/datasources/"
  #      - "./grafana/dashboards:/etc/grafana/provisioning/dashboards/"
  #      - "grafana:/var/lib/grafana"

networks:
  bazaar-network:
    driver: bridge

volumes:
  postgres_data:
  minio_data:
  auth_redis_data:
  search_redis_data:
  grafana:
